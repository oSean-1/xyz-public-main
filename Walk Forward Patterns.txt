// This Pine Script‚Ñ¢ code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// ¬© dg_factor

//@version=6
indicator("Walk Forward Patterns", overlay=true)

// Inputs
bars    = input.int(20500, "Bar Index", tooltip="Total number of bars on your chart.")
opt_len = input.int(5000, "Optimization Length", tooltip="In Sample Test")
bt_len  = input.int(1000, "Backtest Length", tooltip="Out Of Sample Test")
window  = input.string("Rolling", "Window", ["Rolling", "Anchored", "Static", "Blocked", "Triangular", "Ratio", "Fibonacci","üêí Random üêí"], tooltip="You can change type of the patterns by using this parameter.")
random  = input.int(0, "üêí", minval=0, tooltip="You can generate new values by using this parameter when you select 'Random' option in the 'Window' parameter above. [üêíüêíüêí]")
c_step  = input.color(#2962ff, "", inline="c")
c_opt   = input.color(#00e676, "", inline="c")
c_bt    = input.color(#f44336, "", inline="c")

max_step = int((bars - opt_len) / bt_len) - 1

// Table
var table tb = table.new(position.bottom_right, 100, 100,  na, #5d606b, 3, #5d606b, 1)

// Data
int x1 = 0
int x2 = 0
int x3 = 0
int x4 = 0
var int max = 0

for i = 0 to max_step

    if window == "Rolling"
        x1 := bt_len * i 
        x2 := x1 + opt_len 
        x3 := x2
        x4 := x3 + bt_len 

    if window == "Anchored"
        x1 := 0
        x2 := opt_len + bt_len * i
        x3 := x2
        x4 := x3 + bt_len 

    if window == "Static"
        x1 := 0
        x2 := x1 + opt_len
        x3 := x2 + bt_len * i 
        x4 := x3 + bt_len

    if window == "Blocked"
        x1 := bt_len * math.floor(i / 3) * 3
        x2 := opt_len + math.floor(i / 3) * 3 * bt_len
        x3 := i == 0 ? opt_len : opt_len + i * bt_len
        x4 := opt_len + (i + 1) * bt_len

    if window == "Triangular"
        n   = math.floor(i / 3)
        nth = i % 3
        x1 := (n * 3 + (2 - nth)) * bt_len
        x2 := (3 + i) * bt_len
        x3 := x2
        x4 := x2 + bt_len

    if window == "Ratio" or window == "Fibonacci"
        multiplier  = window == "Ratio" ? bt_len / opt_len : math.rphi
        x1 := bt_len * i 
        x2 := x1 + opt_len + i * int(opt_len * multiplier)
        x3 := x2
        x4 := x3 + bt_len 

    if window == "üêí Random üêí"
        var int[] p1 = array.new_int(1, 0)
        var int[] p2 = array.new_int(1, 0)
        seed  = i + 1000 * (random + 1)
        r1 = math.abs(math.sin(seed))
        r2 = math.abs(math.sin(seed * math.pi))
        r3 = math.abs(math.sin(seed * math.e))
        r4 = math.abs(math.cos(seed * math.phi))
        gap = math.round(r4 * opt_len)
        x1 := math.round(r1 * opt_len)
        x2 := math.round(math.max(x1 + gap, x1 + bt_len) * math.max(1, i / 7))   
        t3 = math.max(x2 + bt_len, math.round((r3 * opt_len + (i + 1) * bt_len)))
        x3 := t3 == array.get(p1, 0) ? t3 + bt_len : t3 - bt_len
        array.set(p1, 0, x3)
        t4 = x3 + bt_len
        x4 := t4 == array.get(p2, 0) ? t4 + bt_len : t4
        array.set(p2, 0, x4)

    if x4 > bars
        break

    max := math.max(x4, max)
    c_x1 = 3 + x1 / bt_len
    c_x2 = 2 + x2 / bt_len
    c_x3 = 3 + x3 / bt_len
    c_x4 = 2 + x4 / bt_len
    c_mx = 2 + max / bt_len
    if barstate.islast
        table.cell(tb, 0, 0, window, text_color=chart.fg_color, text_font_family=font.family_monospace), table.merge_cells(tb, 0, 0, c_mx, 0)
        table.cell(tb, 0, 1, "Step", text_color=c_step, tooltip="Walk Forward Step")
        table.cell(tb, 1, 1, "Optimization", text_color=c_opt, tooltip="In Sample Test Range")
        table.cell(tb, 2, 1, "Backtest", text_color=c_bt, tooltip="Out Of Sample Test Range")
        table.cell(tb, 3, 1, str.tostring(0) + " ‚ü∂ " + str.tostring(max), text_color=chart.fg_color, tooltip="Maximum Bar Index Of the Pattern"), table.merge_cells(tb, 3, 1, c_mx, 1)
        table.cell(tb, 0, i + 2, str.tostring(i + 1), text_color=c_step)
        table.cell(tb, 1, i + 2, str.tostring(x1) + " ‚ü∂ " + str.tostring(x2), text_color=c_opt)
        table.cell(tb, 2, i + 2, str.tostring(x3)  + " ‚ü∂ " + str.tostring(x4) , text_color=c_bt)
        table.cell(tb, c_x1, i + 2, "", bgcolor=c_opt), table.merge_cells(tb, c_x1, i + 2, c_x2, i + 2)
        table.cell(tb, c_x3 , i + 2, "", bgcolor=c_bt), table.merge_cells(tb, c_x3 , i + 2, c_x4 , i + 2)
//

plotshape(barstate.isfirst, "@ dg_factor", shape.flag, location.bottom, #00000000, precision=0, editable=false)