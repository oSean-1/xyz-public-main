// This Pine Script™ code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © sewwman

//@version=6
indicator("Enhanced Augmented Dickey-Fuller Test | Seww", shorttitle = "Enhanced ADF", overlay = false)


//Inputs
G = "General ADF Settings"
E = "Enhanced ADF Settings"
V = "Visual Settings"

src = input.source(title = 'Source', defval = close, group = G)
lookback = input.int(title = 'Length', defval = 90, minval = 2, tooltip = 'The test is applied in a moving window. Length defines the number of points in the sample.', group = G)
nLag = input.int(title = 'Maximum lag', defval = 0, minval = 0, tooltip = 'Maximum lag which is included in test. Generally, lags allow taking into account serial correlation of price changes.', group = G)
conf = input.string(title = 'Confidence Level', defval = '90%', options = ['90%', '95%', '99%'], tooltip = 'Defines at which confidence level the critical value of the ADF test statistic is calculated. If the test statistic is below the critical value, the time series sample is concluded to be mean-reverting.', group = G)
isInfobox = input.bool(title = 'Show infobox', defval = true, inline = "G", group = G)
Normalize = input.bool(false, "Normalize Values", tooltip = "Scores ADF from a score of -1 to +1, simplyfying it's scoring",inline = "G",  group = E)
Smoothed = input.bool(false, "Smooth ADF", "Applies Hulll MA Smoothing to the ADF.", inline = "G", group = E)
regime_threshold = input.float(-1.05, "ADF Threshold", tooltip = "Midline value of ADF (not used in normalized version.)", step = 0.05, group = E)
length_hull = input.int(9, minval=1, title = "Smoothing", group = E)
trendcol = input.color(color.rgb(0, 255, 0, 0), "Trending Candle Color", group = V)
mrcol = input.color(color.rgb(255, 0, 0, 0), "Mean Reverting Candle Color", group = V)
bgcol_t = input.color(color.new(#147a50, 50), "Trending Background Color", group = V)
bgcol_m = input.color(color.new(#64416b, 50), "Mean Reverting Background Color", group = V)

//Calculations 

matrix_get(A, i, j, nrows) =>
    array.get(A, i + nrows * j)

matrix_set(A, value, i, j, nrows) =>
    array.set(A, i + nrows * j, value)
    A

transpose(A, nrows, ncolumns) =>
    array<float> AT = array.new_float(nrows * ncolumns, 0)
    for i = 0 to nrows - 1 by 1
        for j = 0 to ncolumns - 1 by 1
            matrix_set(AT, matrix_get(A, i, j, nrows), j, i, ncolumns)
    AT

multiply(A, B, nrowsA, ncolumnsA, ncolumnsB) =>
    array<float> C = array.new_float(nrowsA * ncolumnsB, 0)
    int nrowsB = ncolumnsA
    float elementC = 0.0
    for i = 0 to nrowsA - 1 by 1
        for j = 0 to ncolumnsB - 1 by 1
            elementC := 0
            for k = 0 to ncolumnsA - 1 by 1
                elementC := elementC + matrix_get(A, i, k, nrowsA) * matrix_get(B, k, j, nrowsB)
                elementC
            matrix_set(C, elementC, i, j, nrowsA)
    C

vnorm(X) =>
    int n = array.size(X)
    float norm = 0.0
    for i = 0 to n - 1 by 1
        norm := norm + math.pow(array.get(X, i), 2)
        norm
    math.sqrt(norm)

qr_diag(A, nrows, ncolumns) =>
    array<float> Q = array.new_float(nrows * ncolumns, 0)
    array<float> R = array.new_float(ncolumns * ncolumns, 0)
    array<float> a = array.new_float(nrows, 0)
    array<float> q = array.new_float(nrows, 0)
    float r = 0.0
    float aux = 0.0
    for i = 0 to nrows - 1 by 1
        array.set(a, i, matrix_get(A, i, 0, nrows))
    r := vnorm(a)
    matrix_set(R, r, 0, 0, ncolumns)
    for i = 0 to nrows - 1 by 1
        matrix_set(Q, array.get(a, i) / r, i, 0, nrows)
    if ncolumns != 1
        for k = 1 to ncolumns - 1 by 1
            for i = 0 to nrows - 1 by 1
                array.set(a, i, matrix_get(A, i, k, nrows))
            for j = 0 to k - 1 by 1
                r := 0
                for i = 0 to nrows - 1 by 1
                    r := r + matrix_get(Q, i, j, nrows) * array.get(a, i)
                    r
                matrix_set(R, r, j, k, ncolumns)
                //update vector _a
                for i = 0 to nrows - 1 by 1
                    aux := array.get(a, i) - r * matrix_get(Q, i, j, nrows)
                    array.set(a, i, aux)
            r := vnorm(a)
            matrix_set(R, r, k, k, ncolumns)
            for i = 0 to nrows - 1 by 1
                matrix_set(Q, array.get(a, i) / r, i, k, nrows)
    [Q, R]

pinv(A, nrows, ncolumns) =>
    [Q, R] = qr_diag(A, nrows, ncolumns)
    array<float> QT = transpose(Q, nrows, ncolumns)
    // Calculate Rinv:
    var Rinv = array.new_float(ncolumns * ncolumns, 0)
    float r = 0.0
    matrix_set(Rinv, 1 / matrix_get(R, 0, 0, ncolumns), 0, 0, ncolumns)
    if ncolumns != 1
        for j = 1 to ncolumns - 1 by 1
            for i = 0 to j - 1 by 1
                r := 0.0
                for k = i to j - 1 by 1
                    r := r + matrix_get(Rinv, i, k, ncolumns) * matrix_get(R, k, j, ncolumns)
                    r
                matrix_set(Rinv, r, i, j, ncolumns)
            for k = 0 to j - 1 by 1
                matrix_set(Rinv, -matrix_get(Rinv, k, j, ncolumns) / matrix_get(R, j, j, ncolumns), k, j, ncolumns)
            matrix_set(Rinv, 1 / matrix_get(R, j, j, ncolumns), j, j, ncolumns)
    //
    array<float> Ainv = multiply(Rinv, QT, ncolumns, ncolumns, nrows)
    Ainv

adftest(a, nLag, conf) =>
    if nLag >= array.size(a) / 2 - 2
        runtime.error('ADF: Maximum lag must be less than (Length/2 - 2)')
    int nobs = array.size(a) - nLag - 1
    //
    array<float> y = array.new_float(na)
    array<float> x = array.new_float(na)
    array<float> x0 = array.new_float(na)
    //
    for i = 0 to nobs - 1 by 1
        array.push(y, array.get(a, i) - array.get(a, i + 1)) // current difference, dependent variable
        array.push(x, array.get(a, i + 1)) // previous-bar value, predictor (related to tauADF)
        array.push(x0, 1.0) // constant, predictor
    //
    array<float> X = array.copy(x)
    int M = 2
    X := array.concat(X, x0)
    //
    // introduce lags
    if nLag > 0
        for n = 1 to nLag by 1
            array<float> xl = array.new_float(na)
            for i = 0 to nobs - 1 by 1
                array.push(xl, array.get(a, i + n) - array.get(a, i + n + 1)) // lag-n difference, predictor
            X := array.concat(X, xl)
            M := M + 1
            M
    //
    // Regression
    array<float> c = pinv(X, nobs, M)
    array<float> coeff = multiply(c, y, M, nobs, 1)
    //
    // Standard error
    array<float> Yhat = multiply(X, coeff, nobs, M, 1)
    float meanX = array.avg(x)
    float sum1 = 0.0 // mean square error (MSE) of regression
    float sum2 = 0.0 //
    for i = 0 to nobs - 1 by 1
        sum1 := sum1 + math.pow(array.get(y, i) - array.get(Yhat, i), 2) / (nobs - M)
        sum2 := sum2 + math.pow(array.get(x, i) - meanX, 2)
        sum2
    float SE = math.sqrt(sum1 / sum2)
    //
    // The test statistic 
    float adf = array.get(coeff, 0) / SE
    float crit = switch 
        conf == '90%' => -2.56677 - 1.5384 / nobs - 2.809 / nobs / nobs
        conf == '95%' => -2.86154 - 2.8903 / nobs - 4.234 / nobs / nobs - 40.040 / nobs / nobs / nobs
        conf == '99%' => -3.43035 - 6.5393 / nobs - 16.786 / nobs / nobs - 79.433 / nobs / nobs / nobs

    [adf, crit, nobs]


// --- main ---

array<float> a = array.new_float(na)
for i = 0 to lookback - 1 by 1
    array.push(a, src[i])

// perform the ADF test 
[tauADF, crit, nobs] = adftest(a, nLag, conf)

//ADF Smoothing using HULL MA
adf_hullma = ta.wma(2*ta.wma(tauADF, length_hull/2)-ta.wma(tauADF, length_hull), math.floor(math.sqrt(length_hull)))

// Expected bounds for ADF (adjust based on historical data or domain knowledge)
adf_min = -4
adf_max = 1.4

// Normalize ADF to range [-1, 1]
normalized_adf_smo = (2 * (adf_hullma - adf_min) / (adf_max - adf_min)) - 1
normalized_adf = (2 * (tauADF - adf_min) / (adf_max - adf_min)) - 1

clipped_value_smo = math.min(1, math.max(-1, normalized_adf_smo)) //Putting a cap on the values as if I used the real min/max the indicator would never reach value of 1
clipped_value = math.min(1, math.max(-1, normalized_adf)) //Putting a cap on the values as if I used the real min/max the indicator would never reach value of 1

// Plot the ADFs
color tauColor = switch 
    tauADF < crit => #7AF54D
    tauADF > crit => color.from_gradient(math.abs(tauADF), 0.0, math.abs(crit), color.white, #F5DF4D)


plot(not Smoothed and not Normalize? tauADF : na, title="Normalized ADF", color = tauColor, style = plot.style_cross, linewidth = 2, editable = false)

plot(Normalize and Smoothed ? clipped_value_smo : na, title="Normalized ADF", color = tauColor, linewidth=4, editable = false)

plot(Normalize and not Smoothed ? clipped_value : na, title="Normalized ADF", color = tauColor, style = plot.style_cross, linewidth = 2, editable = false)

plot(not Normalize and Smoothed? adf_hullma : na, title = "ADF", color = tauColor, linewidth = 4, editable = false)


//Background Colors, Bar Colors, and Other Plotting

bgcolor(#64416b)
plot(0.0, color = #939597, title = 'Zero')
plot(not Normalize ? crit : na, color = #c84df5, title = 'Critical value')
hline(not Normalize ? regime_threshold : na, "Regime Threshold", color = color.yellow)

bg_color = normalized_adf_smo > 0 ? bgcol_t : normalized_adf_smo < 0 ? bgcol_m : color.new(color.gray, 50)
bg_colornot = tauADF > regime_threshold ? bgcol_t : tauADF < regime_threshold ? bgcol_m : color.new(color.gray, 50)
bg_color_smo = adf_hullma > regime_threshold ? bgcol_t : adf_hullma < regime_threshold ? bgcol_m : color.new(color.gray, 50)
bg_color_nor = clipped_value > 0 ? bgcol_t: clipped_value < 0 ? bgcol_m : color.new(color.gray, 50)

bgcolor(Normalize and Smoothed ? bg_color : na, force_overlay = true, editable = false)
barcolor(Normalize and Smoothed ? normalized_adf_smo > 0 ? trendcol : normalized_adf_smo < 0 ? mrcol : na : na, editable = false)

bgcolor(not Normalize and Smoothed ? bg_color_smo : na, force_overlay = true, editable = false)
barcolor(not Normalize and Smoothed ? adf_hullma > regime_threshold ? trendcol : adf_hullma < regime_threshold ? mrcol : na : na, editable = false)

bgcolor(Normalize and not Smoothed ? bg_color_nor : na, force_overlay = true, editable = false)
barcolor(Normalize and not Smoothed ? clipped_value > 0 ? trendcol : clipped_value < 0 ? mrcol : na : na, editable = false)

bgcolor(not Normalize and not Smoothed ? bg_colornot : na, force_overlay = true, editable = false)
barcolor(not Normalize and not Smoothed ? tauADF > regime_threshold ? trendcol : tauADF < regime_threshold ? mrcol : na : na, editable = false)

//Table Creation
if barstate.islast and isInfobox and Normalize and Smoothed
    infobox = table.new('bottom_left', 2, 3, bgcolor = #faedf5, frame_color = tauADF < crit ? #7AF54D : #C84DF5, frame_width = 1)
    table.cell(infobox, 0, 0, text = 'Test Statistic', text_color = color.black, text_size = size.small)
    table.cell(infobox, 0, 1, text = 'Regime Threshold', text_color = color.black, text_size = size.small)
    table.cell(infobox, 0, 2, text = 'Mean Reverting?', text_color = color.black, text_size = size.small)
    table.cell(infobox, 1, 0, text = str.format('{0, number, #.####}', normalized_adf_smo), text_color = color.black, text_size = size.small)
    table.cell(infobox, 1, 1, text = str.format('{0, number, #.####}', 0), text_color = color.black, text_size = size.small)
    table.cell(infobox, 1, 2, text = normalized_adf_smo < 0 ? 'Yes' : 'No', text_color = color.black, text_size = size.small)

if barstate.islast and isInfobox and not Normalize and Smoothed
    infobox = table.new('bottom_left', 2, 3, bgcolor = #faedf5, frame_color = tauADF < crit ? #7AF54D : #C84DF5, frame_width = 1)
    table.cell(infobox, 0, 0, text = 'Test Statistic', text_color = color.black, text_size = size.small)
    table.cell(infobox, 0, 1, text = 'Regime Threshold', text_color = color.black, text_size = size.small)
    table.cell(infobox, 0, 2, text = 'Mean Reverting?', text_color = color.black, text_size = size.small)
    table.cell(infobox, 1, 0, text = str.format('{0, number, #.####}', adf_hullma), text_color = color.black, text_size = size.small)
    table.cell(infobox, 1, 1, text = str.format('{0, number, #.####}', regime_threshold), text_color = color.black, text_size = size.small)
    table.cell(infobox, 1, 2, text = adf_hullma < regime_threshold ? 'Yes' : 'No', text_color = color.black, text_size = size.small)

if barstate.islast and isInfobox and Normalize and not Smoothed
    infobox = table.new('bottom_left', 2, 3, bgcolor = #faedf5, frame_color = tauADF < crit ? #7AF54D : #C84DF5, frame_width = 1)
    table.cell(infobox, 0, 0, text = 'Normalized Test Statistic', text_color = color.black, text_size = size.small)
    table.cell(infobox, 0, 1, text = 'Regime Threshold', text_color = color.black, text_size = size.small)
    table.cell(infobox, 0, 2, text = 'Mean Reverting?', text_color = color.black, text_size = size.small)
    table.cell(infobox, 1, 0, text = str.format('{0, number, #.####}', clipped_value), text_color = color.black, text_size = size.small)
    table.cell(infobox, 1, 1, text = str.format('{0, number, #.####}', regime_threshold), text_color = color.black, text_size = size.small)
    table.cell(infobox, 1, 2, text = clipped_value < 0 ? 'Yes' : 'No', text_color = color.black, text_size = size.small)

if barstate.islast and isInfobox and not Normalize and not Smoothed
    infobox = table.new('bottom_left', 2, 3, bgcolor = #faedf5, frame_color = tauADF < crit ? #7AF54D : #C84DF5, frame_width = 1)
    table.cell(infobox, 0, 0, text = 'Test Statistic', text_color = color.black, text_size = size.small)
    table.cell(infobox, 0, 1, text = 'Regime Threshold', text_color = color.black, text_size = size.small)
    table.cell(infobox, 0, 2, text = 'Mean Reverting?', text_color = color.black, text_size = size.small)
    table.cell(infobox, 1, 0, text = str.format('{0, number, #.####}', tauADF), text_color = color.black, text_size = size.small)
    table.cell(infobox, 1, 1, text = str.format('{0, number, #.####}', regime_threshold), text_color = color.black, text_size = size.small)
    table.cell(infobox, 1, 2, text = tauADF < regime_threshold ? 'Yes' : 'No', text_color = color.black, text_size = size.small)

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////