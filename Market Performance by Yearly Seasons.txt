// This work is licensed under a Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA 4.0) https://creativecommons.org/licenses/by-nc-sa/4.0/
// Â© LuxAlgo

//@version=6
indicator('Market Performance by Yearly Seasons [LuxAlgo]','LuxAlgo - Market Performance by Yearly Seasons', max_boxes_count = 500, max_labels_count = 500, max_bars_back = 5000)
//---------------------------------------------------------------------------------------------------------------------}
//CONSTANTS & STRINGS & INPUTS
//---------------------------------------------------------------------------------------------------------------------{
GREEN               = #089981
RED                 = #F23645

NORTHERN            = 'Northern'
SOUTHERN            = 'Southern'

METEOROLOGICAL      = 'Meteorological'
ASTRONOMICAL        = 'Astronomical'

ALLSEASONS          = 'All Four Seasons'
AUTUMN              = 'Autumn'
WINTER              = 'Winter'
SPRING              = 'Spring'
SUMMER              = 'Summer'

TINY                = 'Tiny'
SMALL               = 'Small'
NORMAL              = 'Normal'
LARGE               = 'Large'
HUGE                = 'Huge'

STYLE_GROUP         = 'STYLE'

maxSeasonsInput     = input.int(    10,             'Max seasons')
hemisphereInput     = input.string( NORTHERN,       'Hemisphere',   options=[NORTHERN,SOUTHERN])
seasonsTypeInput    = input.string( METEOROLOGICAL, 'Season Type',  options=[ASTRONOMICAL,METEOROLOGICAL])
displayInput        = input.string( ALLSEASONS,     'Display',      options=[ALLSEASONS,AUTUMN,WINTER,SPRING,SUMMER])

barWidthInput       = input.int(    10,             'Bar Size',     group=STYLE_GROUP,  inline = 'autofit', minval = 5, maxval = 200)
autofitInput        = input.bool(   true,           'Autofit',      group=STYLE_GROUP,  inline = 'autofit')
labelSizeInput      = input.string( NORMAL,         'Labels Size',  group=STYLE_GROUP,  options = [TINY,SMALL,NORMAL,LARGE,HUGE])
bullishColorInput   = input.color(  GREEN,          '',             group=STYLE_GROUP,  inline = 'colors')
bearishColorInput   = input.color(  RED,            '',             group=STYLE_GROUP,  inline = 'colors')
gradientInput       = input.bool(   true,           'Gradient',     group=STYLE_GROUP,  inline = 'colors')

//---------------------------------------------------------------------------------------------------------------------}
//DATA STRUCTURES & VARIABLES
//---------------------------------------------------------------------------------------------------------------------{
type display
    box     autumBox
    label   autumLabel
    box     winterBox
    label   winterLabel
    box     springBox
    label   springLabel
    box     summerBox
    label   summerLabel
    
var parsedLabelSize = switch labelSizeInput
    TINY            => size.tiny
    SMALL           => size.small
    NORMAL          => size.normal
    LARGE           => size.large
    HUGE            => size.huge	

var display seasonsDisplay  = display.new(box.new(na,na,na,na),label.new(na,na,'Autumn',color = color(na),style = label.style_label_up,size = parsedLabelSize),box.new(na,na,na,na),label.new(na,na,'Winter',color = color(na),style = label.style_label_up,size = parsedLabelSize),box.new(na,na,na,na),label.new(na,na,'Spring',color = color(na),style = label.style_label_up,size = parsedLabelSize),box.new(na,na,na,na),label.new(na,na,'Summer',color = color(na),style = label.style_label_up,size = parsedLabelSize))
var int firstIndex          = 0
var int visibleBars         = 0

//---------------------------------------------------------------------------------------------------------------------}
//USER-DEFINED FUNCTIONS
//---------------------------------------------------------------------------------------------------------------------{
parsedBarWidth(int size) => autofitInput ? int(visibleBars/(size*3+1)) : barWidthInput

push(array<float> a_rray,float data,int maxSize,array<int> y_ears, int y_ear) =>
    a_rray.push(data)
    if a_rray.size() > maxSize
        a_rray.shift()

    y_ears.push(y_ear)
    if y_ears.size() > maxSize
        y_ears.shift()

seasonsData(bool astronomical = false) =>
    var array<float> autumn     = array.new<float>()
    var array<float> winter     = array.new<float>()
    var array<float> spring     = array.new<float>()
    var array<float> summer     = array.new<float>()
    var array<int> autumnYears  = array.new<int>()
    var array<int> winterYears  = array.new<int>()
    var array<int> springYears  = array.new<int>()
    var array<int> summerYears  = array.new<int>()
    var float seasonOpen        = open
    var string currentSeason    = ''

    parsedMonth = syminfo.type == 'crypto' ? month  : month(time_close)
    parsedYear  = syminfo.type == 'crypto' ? year   : year(time_close)
    
    if astronomical
        parsedDayofmonth = syminfo.type == 'crypto' ? dayofmonth : dayofmonth(time_close)

        equinoxMarch        = parsedDayofmonth >= 20 and parsedMonth == 3
        solsticeJune        = parsedDayofmonth >= 21 and parsedMonth == 6
        equinoxSeptember    = parsedDayofmonth >= 22 and parsedMonth == 9
        solsticeDecember    = parsedDayofmonth >= 21 and parsedMonth == 12

        if (equinoxSeptember and not equinoxSeptember[1])  or (solsticeDecember and not solsticeDecember[1]) or (equinoxMarch and not equinoxMarch[1]) or (solsticeJune and not solsticeJune[1])
            seasonPerformance = (close[1] - seasonOpen) * 100 / seasonOpen
            
            switch
                equinoxMarch        => hemisphereInput == NORTHERN ? push(winter,seasonPerformance,maxSeasonsInput,winterYears,parsedYear-1) : push(summer,seasonPerformance,maxSeasonsInput,summerYears,parsedYear-1)
                solsticeJune        => hemisphereInput == NORTHERN ? push(spring,seasonPerformance,maxSeasonsInput,springYears,parsedYear) : push(autumn,seasonPerformance,maxSeasonsInput,autumnYears,parsedYear)
                equinoxSeptember    => hemisphereInput == NORTHERN ? push(summer,seasonPerformance,maxSeasonsInput,summerYears,parsedYear) : push(winter,seasonPerformance,maxSeasonsInput,winterYears,parsedYear)
                solsticeDecember    => hemisphereInput == NORTHERN ? push(autumn,seasonPerformance,maxSeasonsInput,autumnYears,parsedYear) : push(spring,seasonPerformance,maxSeasonsInput,springYears,parsedYear)

            currentSeason := switch
                equinoxMarch        => hemisphereInput == NORTHERN ? SPRING : AUTUMN
                solsticeJune        => hemisphereInput == NORTHERN ? SUMMER : WINTER
                equinoxSeptember    => hemisphereInput == NORTHERN ? AUTUMN : SPRING
                solsticeDecember    => hemisphereInput == NORTHERN ? WINTER : SUMMER

            seasonOpen := open

    else if parsedMonth == 3 or parsedMonth == 6 or parsedMonth == 9 or parsedMonth == 12    
        seasonPerformance = (close[1] - seasonOpen) * 100 / seasonOpen
        
        switch parsedMonth
            3   => hemisphereInput == NORTHERN ? push(winter,seasonPerformance,maxSeasonsInput,winterYears,parsedYear-1) : push(summer,seasonPerformance,maxSeasonsInput,summerYears,parsedYear-1)
            6   => hemisphereInput == NORTHERN ? push(spring,seasonPerformance,maxSeasonsInput,springYears,parsedYear) : push(autumn,seasonPerformance,maxSeasonsInput,autumnYears,parsedYear)
            9   => hemisphereInput == NORTHERN ? push(summer,seasonPerformance,maxSeasonsInput,summerYears,parsedYear) : push(winter,seasonPerformance,maxSeasonsInput,winterYears,parsedYear)
            12  => hemisphereInput == NORTHERN ? push(autumn,seasonPerformance,maxSeasonsInput,autumnYears,parsedYear) : push(spring,seasonPerformance,maxSeasonsInput,springYears,parsedYear)

        currentSeason := switch parsedMonth
            3   => hemisphereInput == NORTHERN ? SPRING : AUTUMN
            6   => hemisphereInput == NORTHERN ? SUMMER : WINTER
            9   => hemisphereInput == NORTHERN ? AUTUMN : SPRING
            12  => hemisphereInput == NORTHERN ? WINTER : SUMMER

        seasonOpen := open

    [autumn,winter,spring,summer,currentSeason,autumnYears,winterYears,springYears,summerYears]

displaySeason(int index,box b_ox,label l_abel,float level, float axisXLevel,float max, float min,int barWidth, bool border = false) =>    
    leftIndex           = last_bar_index - math.min(index * 3 * barWidth,4990)
    topLeftPoint        = chart.point.new(na,leftIndex,math.max(0,level))
    bottomRightPoint    = chart.point.new(na,leftIndex + 2 * barWidth,math.min(0,level))
    labelPoint          = chart.point.new(na,leftIndex + barWidth,axisXLevel)
        
    b_ox.set_top_left_point(    topLeftPoint)
    b_ox.set_bottom_right_point(bottomRightPoint)        
    b_ox.set_bgcolor(           level >= 0 ? (gradientInput ? color.from_gradient(level,0,max,color.new(bullishColorInput,80),bullishColorInput) : bullishColorInput): (gradientInput ? color.from_gradient(level,min,0,bearishColorInput,color.new(bearishColorInput,80)) : bearishColorInput))
    b_ox.set_border_color(      level >= 0 ? (gradientInput ? color.from_gradient(level,0,max,color.new(bullishColorInput,80),bullishColorInput) : bullishColorInput): (gradientInput ? color.from_gradient(level,min,0,bearishColorInput,color.new(bearishColorInput,80)) : bearishColorInput))

    if border
        b_ox.set_border_color(  chart.fg_color)
        b_ox.set_border_width(  3)

    l_abel.set_point(labelPoint)

showSeasons(array<float> autumn,array<float>  winter,array<float>  spring,array<float>  summer, string currentSeason) =>
    var line axisXLine  = line.new(na,na,na,na,color = chart.fg_color)
    minLevel            = math.min(autumn.avg(),winter.avg(),spring.avg(),summer.avg())
    maxLevel            = math.max(autumn.avg(),winter.avg(),spring.avg(),summer.avg())
    axisXLevel          = math.min(0,minLevel) - 0.05 * (maxLevel - minLevel)
    barWidth            = parsedBarWidth(4)

    displaySeason(1,seasonsDisplay.summerBox,seasonsDisplay.summerLabel,summer.avg(),axisXLevel,maxLevel,minLevel,barWidth, currentSeason == SUMMER)
    displaySeason(2,seasonsDisplay.springBox,seasonsDisplay.springLabel,spring.avg(),axisXLevel,maxLevel,minLevel,barWidth, currentSeason == SPRING)
    displaySeason(3,seasonsDisplay.winterBox,seasonsDisplay.winterLabel,winter.avg(),axisXLevel,maxLevel,minLevel,barWidth, currentSeason == WINTER)
    displaySeason(4,seasonsDisplay.autumBox,seasonsDisplay.autumLabel,autumn.avg(),axisXLevel,maxLevel,minLevel,barWidth, currentSeason == AUTUMN)

    leftIndex = last_bar_index - math.min(12 * barWidth + barWidth,4990)    
    axisXLine.set_first_point(chart.point.new(na,leftIndex,axisXLevel))
    axisXLine.set_second_point(chart.point.new(na,last_bar_index,axisXLevel))

showSeason(array<float> season, array<int> years) =>
    for eachBox in box.all
        eachBox.delete()

    for eachLabel in label.all
        eachLabel.delete()
    
    var line axisXLine  = line.new(na,na,na,na,color = chart.fg_color)
    minLevel            = season.min()
    maxLevel            = season.max()
    axisXLevel          = math.min(0,minLevel) - 0.05 * (maxLevel - minLevel)
    barWidth            = parsedBarWidth(season.size())
    leftIndex           = last_bar_index - math.min(season.size() * 3 * barWidth + barWidth,4990)
    
    axisXLine.set_first_point(  chart.point.new(na,leftIndex,axisXLevel))
    axisXLine.set_second_point( chart.point.new(na,last_bar_index,axisXLevel))

    tagIndex            = last_bar_index - math.min(int(0.5*season.size()) * 3 * barWidth + barWidth,2495)
    
    label.new(chart.point.new(na,tagIndex,season.max()),displayInput,color = color(na),style = label.style_label_down,size = parsedLabelSize)

    for index = 1 to season.size()
        level = season.get(-index)
        y_ear = years.get(-index) 
        displaySeason(index,box.new(na,na,na,na),label.new(na,na,str.substring(str.tostring(y_ear),2) ,color = color(na),style = label.style_label_up,size = parsedLabelSize),level,axisXLevel,maxLevel,minLevel,barWidth)

//---------------------------------------------------------------------------------------------------------------------}
//MUTABLE VARIABLES & EXECUTION
//---------------------------------------------------------------------------------------------------------------------{
if barstate.isconfirmed
    if time == chart.left_visible_bar_time
        firstIndex := bar_index

    [autumn,winter,spring,summer,currentSeason,autumnYears,winterYears,springYears,summerYears] = request.security(syminfo.tickerid,seasonsTypeInput == ASTRONOMICAL ? '1D' : '1M',seasonsData(seasonsTypeInput == ASTRONOMICAL))

    if barstate.islastconfirmedhistory or barstate.isrealtime        
        visibleBars := last_bar_index - firstIndex

        switch displayInput
            ALLSEASONS => showSeasons(autumn,winter,spring,summer,currentSeason)
            AUTUMN => showSeason(autumn,autumnYears)
            WINTER => showSeason(winter,winterYears)
            SPRING => showSeason(spring,springYears)
            SUMMER => showSeason(summer,summerYears)

//---------------------------------------------------------------------------------------------------------------------}
