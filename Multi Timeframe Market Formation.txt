// This work is licensed under a Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA 4.0) https://creativecommons.org/licenses/by-nc-sa/4.0/
// © LuxAlgo

//@version=5
indicator('Multi Timeframe Market Formation [LuxAlgo]','LuxAlgo - MTF Formation',overlay = true,calc_bars_count = 1000,max_lines_count = 32, max_labels_count = 16)
//---------------------------------------------------------------------------------------------------------------------}
//CONSTANTS & STRINGS & INPUTS
//---------------------------------------------------------------------------------------------------------------------{
BULLISH_LEG                 = 1
BEARISH_LEG                 = 0

BULLISH                     = 'BULLISH'
BEARISH                     = 'BEARISH'
SIDEWAYS                    = 'SIDEWAYS'
CONTRACTION                 = 'CONTRACTION'
EXPANSION                   = 'EXPANSION'

BULLISH_COLOR               = #089981
BEARISH_COLOR               = #F23645
SIDEWAYS_COLOR              = color.yellow
CONTRACTION_COLOR           = color.orange
EXPANSION_COLOR             = color.blue

TRIANGLE_UP                 = '▲'
TRIANGLE_DOWN               = '▼'
TRIANGLE_OUT                = '▶'
TRIANGLE_IN                 = '◀'

TIMEFRAMES_GROUP            = 'TIMEFRAMES'
STYLE_GROUP                 = 'STYLE'

pivotLengthTooltip          = 'Size of market Formations on the chart timeframe'
showTrailingChannelTooltip  = 'Enable/Disable Trailing Channel and set multiplier'
timeframe1Tooltip           = 'Enable/Disable Timeframe 1, Set Size of Market Formations and Enable/Disable Current Confirmed Support and Resistance Levels'
timeframe2Tooltip           = 'Enable/Disable Timeframe 2, Set Size of Market Formations and Enable/Disable Current Confirmed Support and Resistance Levels'
timeframe3Tooltip           = 'Enable/Disable Timeframe 3, Set Size of Market Formations and Enable/Disable Current Confirmed Support and Resistance Levels'
timeframe4Tooltip           = 'Enable/Disable Timeframe 4, Set Size of Market Formations and Enable/Disable Current Confirmed Support and Resistance Levels'
timeframe5Tooltip           = 'Enable/Disable Timeframe 5, Set Size of Market Formations and Enable/Disable Current Confirmed Support and Resistance Levels'
showLabelsTooltip           = 'Enable/Disable Timeframe Sync Labels'
gradientInSyncTooltip       = 'Enable/Disable Transparency Gradient'

pivotLengthInput            = input.int(        5,      'Formation size',       tooltip = pivotLengthTooltip,           minval=1)

timeframe1EnabledInput      = input.bool(       true,   'TF1',  group = TIMEFRAMES_GROUP,   inline='1')
timeframe1Input             = input.timeframe(  '60',   '',             group = TIMEFRAMES_GROUP,   inline='1')
timeframe1SizeInput         = input.int(        5,      'Size',         group = TIMEFRAMES_GROUP,   inline='1', minval=1)
timeframe1HighInput         = input.bool(       true,   'High',         group = TIMEFRAMES_GROUP,   inline='1')
timeframe1LowInput          = input.bool(       true,   'Low',          group = TIMEFRAMES_GROUP,   inline='1', tooltip = timeframe1Tooltip)

timeframe2EnabledInput      = input.bool(       true,   'TF2',  group = TIMEFRAMES_GROUP,   inline='2')
timeframe2Input             = input.timeframe(  '240',  '',             group = TIMEFRAMES_GROUP,   inline='2')
timeframe2SizeInput         = input.int(        5,      'Size',         group = TIMEFRAMES_GROUP,   inline='2', minval=1)
timeframe2HighInput         = input.bool(       true,   'High',         group = TIMEFRAMES_GROUP,   inline='2')
timeframe2LowInput          = input.bool(       true,   'Low',          group = TIMEFRAMES_GROUP,   inline='2', tooltip = timeframe2Tooltip)

timeframe3EnabledInput      = input.bool(       true,   'TF3',  group = TIMEFRAMES_GROUP,   inline='3')
timeframe3Input             = input.timeframe(  'D',    '',             group = TIMEFRAMES_GROUP,   inline='3')
timeframe3SizeInput         = input.int(        5,      'Size',         group = TIMEFRAMES_GROUP,   inline='3', minval=1)
timeframe3HighInput         = input.bool(       true,   'High',         group = TIMEFRAMES_GROUP,   inline='3')
timeframe3LowInput          = input.bool(       true,   'Low',          group = TIMEFRAMES_GROUP,   inline='3', tooltip = timeframe3Tooltip)

timeframe4EnabledInput      = input.bool(       false,  'TF4',  group = TIMEFRAMES_GROUP,   inline='4')
timeframe4Input             = input.timeframe(  'W',    '',             group = TIMEFRAMES_GROUP,   inline='4')
timeframe4SizeInput         = input.int(        5,      'Size',         group = TIMEFRAMES_GROUP,   inline='4', minval=1)
timeframe4HighInput         = input.bool(       true,   'High',         group = TIMEFRAMES_GROUP,   inline='4')
timeframe4LowInput          = input.bool(       true,   'Low',          group = TIMEFRAMES_GROUP,   inline='4', tooltip = timeframe4Tooltip)

timeframe5EnabledInput      = input.bool(       false,  'TF5',  group = TIMEFRAMES_GROUP,   inline='5')
timeframe5Input             = input.timeframe(  'M',    '',             group = TIMEFRAMES_GROUP,   inline='5')
timeframe5SizeInput         = input.int(        5,      'Size',         group = TIMEFRAMES_GROUP,   inline='5', minval=1)
timeframe5HighInput         = input.bool(       true,   'High',         group = TIMEFRAMES_GROUP,   inline='5')
timeframe5LowInput          = input.bool(       true,   'Low',          group = TIMEFRAMES_GROUP,   inline='5', tooltip = timeframe5Tooltip)

showLabelsInput             = input.bool(   true,               'Show Labels',          group = STYLE_GROUP, tooltip = showLabelsTooltip)
gradientInSyncInput         = input.bool(   true,               'Transparency Gradient',group = STYLE_GROUP, tooltip = gradientInSyncTooltip)
showTrailingChannelInput    = input.bool(   true,               'Trailing Channel',     group = STYLE_GROUP, tooltip = '', inline = 'channel')
volatilityMultiplierInput   = input.float(  2.,                 ' | Multiplier',           group = STYLE_GROUP, tooltip = showTrailingChannelTooltip,inline = 'channel', minval=0)
bullishColorInput           = input.color(  BULLISH_COLOR,      'Bullish',              group = STYLE_GROUP)
bearishColorInput           = input.color(  BEARISH_COLOR,      'Bearish',              group = STYLE_GROUP)
sidewaysColorInput          = input.color(  SIDEWAYS_COLOR,     'Sideways',             group = STYLE_GROUP)
contractionColorInput       = input.color(  CONTRACTION_COLOR,  'Contraction',          group = STYLE_GROUP)
expansionColorInput         = input.color(  EXPANSION_COLOR,    'Expansion',            group = STYLE_GROUP)

// we check if any timeframe from the settings panel is smaller than the chart timeframe, we only allow timeframes bigger than the chart timeframe
if (timeframe1EnabledInput and timeframe.in_seconds(timeframe1Input) <= timeframe.in_seconds()) or
     (timeframe2EnabledInput and timeframe.in_seconds(timeframe2Input) <= timeframe.in_seconds()) or
     (timeframe3EnabledInput and timeframe.in_seconds(timeframe3Input) <= timeframe.in_seconds()) or
     (timeframe4EnabledInput and timeframe.in_seconds(timeframe4Input) <= timeframe.in_seconds()) or
     (timeframe5EnabledInput and timeframe.in_seconds(timeframe5Input) <= timeframe.in_seconds())

    runtime.error('Please check the settings panel. One or more Timeframes are smaller than the chart timeframe. Select bigger timeframes in the settings panel, or a smaller chart timeframe.')

//---------------------------------------------------------------------------------------------------------------------}
//DATA STRUCTURES & VARIABLES
//---------------------------------------------------------------------------------------------------------------------{
// @type                UDT to store market structures defined by the last 4 pivot points
// @field lastHigh      last pivot high        
// @field lastLow       last pivot low
// @field currentHigh   current pivot high
// @field currentLow    current pivot low
// @field bias          string that can be BULLISH, BEARISH, SIDEWAYS, CONTRACTION or EXPANSION
// @field tag           string to identify the timeframe
// @field highEnabled   bool to enable/disable the current pivot high as S/R level
// @field lowEnabled    bool to enable/disable the current pivot low as S/R level
type structure
    float lastHigh
    float lastLow
    float currentHigh
    float currentLow
    string bias
    string tag
    bool highEnabled
    bool lowEnabled

// @type                UDT to store 
// @field name          description
// @field name          description
type level
    line l_ine
    label l_abel

// @variable
var array<structure> multiTimeFrameStructures = array.new<structure>()
// @variable
var map<float,level> levels = map.new<float,level>()
// @variable
var plotDisplay = display.all - display.status_line
//---------------------------------------------------------------------------------------------------------------------}
//USER-DEFINED FUNCTIONS
//---------------------------------------------------------------------------------------------------------------------{
// @function            Get the value of the current leg, it can be 0 (bearish) or 1 (bullish)
// @returns             int
leg(int size) =>
    var leg     = 0    
    newLegHigh  = high[size] > ta.highest( size)
    newLegLow   = low[size]  < ta.lowest(  size)
    
    if newLegHigh
        leg := BEARISH_LEG
    else if newLegLow
        leg := BULLISH_LEG
    leg

// @function            Identify whether the current value is the start of a new leg (swing)
// @param leg           (int) Current leg value
// @returns             bool
startOfNewLeg(int leg)      => ta.change(leg) != 0

// @function            Identify whether the current level is the start of a new bearish leg (swing)
// @param leg           (int) Current leg value
// @returns             bool
startOfBearishLeg(int leg)  => ta.change(leg) == -1

// @function            Identify whether the current level is the start of a new bullish leg (swing)
// @param leg           (int) Current leg value
// @returns             bool
startOfBullishLeg(int leg)  => ta.change(leg) == +1

// @function            get a string from timeframe and s_tring
// @param s_tring       (string) mark to attach
// @returns             string
tag(string s_tring) => timeframe.period + '(' + s_tring + ')'

// @function            get data to create a structure
// @param size          (int) structure size
// @param outputOffset  (int) number of bars to offset the output values
// @returns             tuple
getCurrentStructure(int size,int outputOffset) =>    
    var float lastLow       = 0
    var float lastHigh      = 0
    var float currentHigh   = 0
    var float currentLow    = 0
    
    currentLeg              = leg(size)
    newPivot                = startOfNewLeg(currentLeg)
    pivotLow                = startOfBullishLeg(currentLeg)
    pivotHigh               = startOfBearishLeg(currentLeg)

    if newPivot
        if pivotLow            
            lastLow     := currentLow
            currentLow  := low[size]
        else            
            lastHigh    := currentHigh
            currentHigh := high[size]

    bullishStructure = lastLow < currentLow and lastHigh < currentHigh
    bearishStructure = lastLow > currentLow and lastHigh > currentHigh

    contraction     = currentHigh < lastHigh and currentLow > lastLow
    expansion       = currentHigh > lastHigh and currentLow < lastLow

    bias            = bullishStructure ? BULLISH : bearishStructure ? BEARISH : contraction ? CONTRACTION : expansion ? EXPANSION : SIDEWAYS
    tag             = bullishStructure ? tag(TRIANGLE_UP) : bearishStructure ? tag(TRIANGLE_DOWN) : contraction ? tag(TRIANGLE_IN) : expansion ? tag(TRIANGLE_OUT) : tag(TRIANGLE_IN)

    [lastLow[outputOffset],lastHigh[outputOffset],currentLow[outputOffset],currentHigh[outputOffset],bias[outputOffset],tag[outputOffset]]

// @function            get structure from chart timeframe
// @param size          (int) structure size
// @returns             structure
getStructure(int size) =>
    var structure currentStructure = structure.new()
    [lastLow,lastHigh,currentLow,currentHigh,bias,tag] = getCurrentStructure(size,0)

    currentStructure.lastLow        := lastLow
    currentStructure.currentLow     := currentLow
    currentStructure.lastHigh       := lastHigh
    currentStructure.currentHigh    := currentHigh
    currentStructure.highEnabled    := true
    currentStructure.lowEnabled     := true
    currentStructure.bias           := bias
    currentStructure.tag            := tag
    
    currentStructure

// @function            get new structure from higher timeframe
// @param timeframe     (simple string) timeframe to request data from
// @param size          (int) structure size
// @param highEnabled   (bool) true if S/R high is enabled
// @param lowEnabled    (bool) true if S/R low is enabled
// @returns             structure
requestSecurity(simple string timeframe,int size, bool highEnabled, bool lowEnabled) => 
    var structure currentStructure = structure.new()

    [lastLow,lastHigh,currentLow,currentHigh,bias,tag] = request.security(syminfo.tickerid,timeframe,getCurrentStructure(size,1),lookahead = barmerge.lookahead_on)

    currentStructure.lastLow        := lastLow
    currentStructure.currentLow     := currentLow
    currentStructure.lastHigh       := lastHigh
    currentStructure.currentHigh    := currentHigh
    currentStructure.bias           := bias
    currentStructure.tag            := tag
    currentStructure.highEnabled    := highEnabled
    currentStructure.lowEnabled     := lowEnabled
    
    currentStructure

// @function            helper function to get market structure from a higher timeframe
// @param timeframe     (simple string) timeframe to request data from
// @param size          (int) structure size
// @param highEnabled   (bool) true if S/R high is enabled
// @param lowEnabled    (bool) true if S/R low is enabled
// @returns             void
getTimeFrameStructure(simple string timeframe,int size, bool highEnabled, bool lowEnabled) =>
    if timeframe.in_seconds(timeframe) > timeframe.in_seconds()
        multiTimeFrameStructures.push(requestSecurity(timeframe,size,highEnabled,lowEnabled))

// @function            gather and store market structure for each enabled timeframe
// @returns             void
getMultiTimeFrameStructures() =>    
    multiTimeFrameStructures.clear()
    multiTimeFrameStructures.push(getStructure(pivotLengthInput))

    if timeframe1EnabledInput
        getTimeFrameStructure(timeframe1Input,timeframe1SizeInput,timeframe1HighInput,timeframe1LowInput)
    if timeframe2EnabledInput
        getTimeFrameStructure(timeframe2Input,timeframe2SizeInput,timeframe2HighInput,timeframe2LowInput)
    if timeframe3EnabledInput
        getTimeFrameStructure(timeframe3Input,timeframe3SizeInput,timeframe3HighInput,timeframe3LowInput)
    if timeframe4EnabledInput
        getTimeFrameStructure(timeframe4Input,timeframe4SizeInput,timeframe4HighInput,timeframe4LowInput)
    if timeframe5EnabledInput
        getTimeFrameStructure(timeframe5Input,timeframe5SizeInput,timeframe5HighInput,timeframe5LowInput)

// @function            create a new chart.point
// @param offset        (int) offset as number of bars
// @param level         (float) price level
// @returns             chart.point
chartPoint(int offset,float level) => chart.point.new(na,last_bar_index+offset,level)

// @function            draw a level as a line and a label
// @param level         (float) price level
// @param bias          (string) market structure
// @param tag           (string) timeframe and mark
// @param width         (int) with of the line
// @returns             int
drawLevel(float level, string bias, string tag, int width) =>
    lineColor = bias == BULLISH ? color.new(bullishColorInput,50) : bias == BEARISH ? color.new(bearishColorInput,50): bias == EXPANSION ? color.new(expansionColorInput,50) : bias == CONTRACTION ? color.new(contractionColorInput,50) : color.new(sidewaysColorInput,50)

    if not levels.contains(level)            
        l_evel          = level.new()        
        l_evel.l_ine    := line.new(chartPoint(-20,level),chartPoint(+50,level),color = lineColor,width = width)
        l_evel.l_abel   := label.new(chartPoint(+50,level),tag,color = color(na),style = label.style_label_left, textcolor = chart.fg_color, size = size.normal)
        levels.put(level,l_evel)
        0            
    else
        label l_abel    = levels.get(level).l_abel
        l_abel.set_text(l_abel.get_text() + ' + ' +tag)
        line l_ine      = levels.get(level).l_ine
        l_ine.set_color(lineColor)
        0

// @function            draw S/R levels from each timeframe
// @returns             int
drawMultiTimeFrameStructureLevels() =>
    levels.clear()
    for eachLine in line.all
        eachLine.delete()
    for eachLabel in label.all
        eachLabel.delete()     

    for eachStructure in multiTimeFrameStructures
        
        if eachStructure.highEnabled
            drawLevel(eachStructure.currentHigh,eachStructure.bias,eachStructure.tag,2)
        if eachStructure.lowEnabled
            drawLevel(eachStructure.currentLow,eachStructure.bias,eachStructure.tag,2)

// @function            get if there is timeframes in sync with current chart timeframe and the color transparency
// @returns             tuple
timeframesInSync() =>
    sync = 0
    bias = multiTimeFrameStructures.first().bias
    for [index,eachStructure] in multiTimeFrameStructures
        if index > 0 and eachStructure.bias == bias
            sync += 1
    transparency = gradientInSyncInput ? 100*(1-sync/multiTimeFrameStructures.size()) : 0
    [sync >= 1, transparency]

// @function                get top and bottom prices of trailing channel
// @param resetCondition    (bool) condition to check
// @param bias              (string) market structure
// @returns                 tuple
getTrailingChannel(bool resetCondition, string bias) =>
    var int x1      = time
    var float max   = na
    var float min   = na
    var float upper = na
    var float lower = na

    atr             = ta.atr(200) * volatilityMultiplierInput

    if resetCondition
        x1      := time

    if time == x1
        max     := high
        min     := low

        upper   := bias == BEARISH or bias == CONTRACTION ? high + atr : high
        lower   := bias == BULLISH or bias == CONTRACTION ? low - atr : low
        
    else if time > x1
        max     := math.max(high, max)
        min     := math.min(low, min)
        
        upper   := switch 
            bias == EXPANSION => max
            bias == BEARISH or bias == CONTRACTION => min - min[1] + upper
            
        lower   := switch
            bias == EXPANSION => min
            bias == BULLISH or bias == CONTRACTION => max - max[1] + lower

    [upper, lower]

// @function            true if a condition is true on the current bar and false on the previous bar
// @param condition     (bool) condition to check
// @returns             bool
meetCondition(bool condition) => condition and not condition[1]

//---------------------------------------------------------------------------------------------------------------------}
//MUTABLE VARIABLES & EXECUTION
//---------------------------------------------------------------------------------------------------------------------{
if barstate.isconfirmed
    getMultiTimeFrameStructures()

    if barstate.islastconfirmedhistory or barstate.islast
        drawMultiTimeFrameStructureLevels()

[areTimeFramesInSync,timeFramesInSyncTransparency] = timeframesInSync()
structure currentOne = multiTimeFrameStructures.first()
color structureColor = currentOne.bias == BULLISH ? color.new(bullishColorInput,timeFramesInSyncTransparency) : currentOne.bias == BEARISH ? color.new(bearishColorInput,timeFramesInSyncTransparency): currentOne.bias == EXPANSION ? color.new(expansionColorInput,timeFramesInSyncTransparency) : currentOne.bias == CONTRACTION ? color.new(contractionColorInput,timeFramesInSyncTransparency) : color.new(sidewaysColorInput,timeFramesInSyncTransparency)

bullishSignals      = areTimeFramesInSync and currentOne.bias == BULLISH
bearishSignals      = areTimeFramesInSync and currentOne.bias == BEARISH
expansionSignals    = areTimeFramesInSync and currentOne.bias == EXPANSION
contractionSignals  = areTimeFramesInSync and (currentOne.bias == SIDEWAYS or currentOne.bias == CONTRACTION)

resetTimeCondition  = meetCondition(bullishSignals) or meetCondition(bearishSignals) or meetCondition(expansionSignals) or meetCondition(contractionSignals)
[upper, lower]      = getTrailingChannel(resetTimeCondition,currentOne.bias)

plotshape(showLabelsInput and bullishSignals,       'Bullish Labels',       shape.triangleup,   location.belowbar,  structureColor, display = plotDisplay)
plotshape(showLabelsInput and bearishSignals,       'Bearish Labels',       shape.triangledown, location.abovebar,  structureColor, display = plotDisplay)
plotshape(showLabelsInput and expansionSignals,     'Expansion Labels',     shape.triangledown, location.belowbar,  structureColor, display = plotDisplay)
plotshape(showLabelsInput and expansionSignals,     'Expansion Labels',     shape.triangleup,   location.abovebar,  structureColor, display = plotDisplay)
plotshape(showLabelsInput and contractionSignals,   'Contraction Labels',   shape.triangleup,   location.belowbar,  structureColor, display = plotDisplay)
plotshape(showLabelsInput and contractionSignals,   'Contraction Labels',   shape.triangledown, location.abovebar,  structureColor, display = plotDisplay)

plot(areTimeFramesInSync and showTrailingChannelInput ? upper : na,'Trailing Upper Channel', color = resetTimeCondition or close > upper ? na : structureColor, linewidth = 2, style = plot.style_linebr,display = plotDisplay)
plot(areTimeFramesInSync and showTrailingChannelInput ? lower : na,'Trailing Lower Channel', color = resetTimeCondition or close < lower ? na : structureColor, linewidth = 2, style = plot.style_linebr,display = plotDisplay)

//---------------------------------------------------------------------------------------------------------------------}