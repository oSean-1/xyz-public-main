// This Pine Script™ code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © SandiB_17
// _____________________________________________________________________________________________
//                                                                                              |
//      ██████  ██    ██  █████  ███    ██ ████████ ███████ ██████   ██████  ███████ ██████     | 
//     ██    ██ ██    ██ ██   ██ ████   ██    ██    ██      ██   ██ ██       ██      ██   ██    |  
//     ██    ██ ██    ██ ███████ ██ ██  ██    ██    █████   ██   ██ ██   ███ █████   ██████     |   
//     ██ ▄▄ ██ ██    ██ ██   ██ ██  ██ ██    ██    ██      ██   ██ ██    ██ ██      ██   ██    | 
//      ██████   ██████  ██   ██ ██   ████    ██    ███████ ██████   ██████  ███████ ██████     |  
//         ▀▀                                                                                   |
//-----------------------------------------------------------------------------------------------                                                                                    

//@version=6
indicator("Hyper MA Loop | QuantEdgeB", overlay = false)

import TradingView/ta/9

//Design SetUp
ColMode = input.string("Default", title = "Color Mode", group = "Visual | QuantEdgeB", options = ["Default", "Solar","Warm","Classic"])
E_plots = input.bool(true,"Extra Plots")

[color_up, color_dn, color_nu] = switch ColMode
    "Default" => [color.rgb(122, 57, 240), color.rgb(214, 245, 42),color.gray]
    "Solar"   => [#3844eb, #ee6728,color.gray]
    "Warm"    => [#ffbb00, #770737,color.gray]
    "Cool"    => [#07e7fc, color.rgb(237, 8, 249),color.gray]
    "Classic" => [#04f7e7, color.maroon,color.gray]

// Color Palette
color col_up1     = color_up
color col_up2     = color.new(color_up, 70)
color col_up3     = color.new(color_up, 100)
color col_dn1     = color_dn
color col_dn2     = color.new(color_dn, 70)


// Hyper MA Calculation
weight(i, len) =>
    1 / (len - i)


HyMA(src, len) =>
    sum_hyp = 0.0
    sum_weights = 0.0
    for i = 0 to len - 1 by 1
        if not na(src[i])
            w = weight(i, len)
            sum_hyp := sum_hyp + src[i] * w
            sum_weights := sum_weights + w
            sum_weights
    sum_weights > 0 ? sum_hyp / sum_weights : na


src = input.source(close,"HyperMA Source", group = "BASE",inline = "1")
len = input.int(2,"Hyper MA Length", group = "BASE",inline = "1")

HyMa = HyMA(src,len)

// Loop Function
loop_f(a, b, ma) =>
    sum2 = 0.0
    for i = a to b by 1
        sum2 := sum2 + (ma > ma[i] ? 1 : -1)
        sum2
    sum2

a = input.int(1, 'Start', group = 'For Loop', inline = '4')
b = input.int(60, 'End', group = 'For Loop', inline = '4')
longT = input.int(40, title = 'Threshold for long', step = 1, group = 'For Loop', inline = '4')
shortT = input.int(8, title = 'Threshold for short', step = 1, group = 'For Loop', inline = '4')

F_loop = loop_f(a, b,HyMa)

// Score

Long_C  = F_loop > longT
Short_C = F_loop < shortT


var QB = 0

if Long_C and not Short_C
    QB := 1
    QB

if Short_C
    QB := -1
    QB

// Main Plots
color = QB == 1 ? color_up : QB == -1 ? color_dn : na

plot(F_loop,"Hyper MA Loop",color,2)
plot(longT,"Long Threshold",color_up,2)
plot(shortT,"Short Threshold",color_dn,2)
plotcandle(open, high, low, close, 'BarColor', color = color, bordercolor = color, wickcolor = color, force_overlay = true)


// Extra Plots
var PL = 0
PL := QB > 0 ? 1 : QB < 0 ? -1 : 0 

plotline  = E_plots ? ta.ema(close,3)       : na
plotline2 = E_plots ? ta.ema(plotline,16*2) : na
plotline3 = E_plots ? ta.ema(plotline,16*3) : na
plotline4 = E_plots ? ta.ema(plotline,14)   : na

band_width = math.abs(plotline2 - plotline4) / close
mid_col    = color.from_gradient(band_width, 0, 0.05, na, chart.fg_color)

p1 = plot(plotline2 ,  color = color(na), linewidth=1, style = plot.style_linebr,force_overlay = true)
p2 = plot(plotline4,  color = PL==1   ? col_up2 : PL == -1 ? col_dn2 : color.rgb(120, 123, 134, 70), linewidth=1, style = plot.style_linebr,force_overlay = true)
p3 = plot(plotline3,  color = color(na), linewidth=1, style = plot.style_linebr,force_overlay = true)

fill(p1, p2, plotline2, plotline, 
         PL==1   ? col_up2 : PL == -1 ? col_dn2 : color.rgb(120, 123, 134, 70),
         PL==1   ? col_up1 : PL == -1 ? col_dn1 : color.gray
         )
fill(p1, p3, plotline3, plotline4,  PL==1 ? col_up1 : PL == -1 ? col_dn2 : color.rgb(120, 123, 134, 70), na)

// _____________________________________________________________________________________________
//                                                                                              |
//      ██████  ██    ██  █████  ███    ██ ████████ ███████ ██████   ██████  ███████ ██████     | 
//     ██    ██ ██    ██ ██   ██ ████   ██    ██    ██      ██   ██ ██       ██      ██   ██    |  
//     ██    ██ ██    ██ ███████ ██ ██  ██    ██    █████   ██   ██ ██   ███ █████   ██████     |   
//     ██ ▄▄ ██ ██    ██ ██   ██ ██  ██ ██    ██    ██      ██   ██ ██    ██ ██      ██   ██    | 
//      ██████   ██████  ██   ██ ██   ████    ██    ███████ ██████   ██████  ███████ ██████     |  
//         ▀▀                                                                                   |
//-----------------------------------------------------------------------------------------------      