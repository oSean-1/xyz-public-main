// This Pine Scriptâ„¢ code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Â© AlgoAlpha


//@version=5
indicator("Optimized Adaptive SuperTrend [AlgoAlpha]", overlay = true, max_labels_count = 500)

// ðŸŽ¯ INPUTS
atr_len = input.int(14, "ATR Length", group = "SuperTrend Settings")
fact = input.float(3, "SuperTrend Factor", group = "SuperTrend Settings")
training_data_period = input.int(100, "Training Data Length", group = "K-Means Settings")

highvol = input.float(0.80, "High Volatility Percentile", maxval = 1, group = "K-Means Settings")
midvol = input.float(0.55, "Medium Volatility Percentile", maxval = 1, group = "K-Means Settings")
lowvol = input.float(0.30, "Low Volatility Percentile", maxval = 1, group = "K-Means Settings")

t1 = input.int(60, "Transparency 1", maxval = 100, minval = 0, group = "Appearance")
t2 = input.int(85, "Transparency 2", maxval = 100, minval = 0, group = "Appearance")
green = input.color(#00ffbb, "Bullish Color", group = "Appearance")
red = input.color(#ff1100, "Bearish Color", group = "Appearance")

// ðŸ“Œ SMOOTHED ATR CALCULATION
smooth_atr(len) =>
    ta.ema(ta.atr(len), len / 2)

volatility = smooth_atr(atr_len)

// ðŸ“ˆ SUPER TREND FUNCTION (FIXED)
adaptive_supertrend(factor, atr) =>
    src = hl2
    upperBand = src + factor * atr
    lowerBand = src - factor * atr
    prevLowerBand = nz(lowerBand[1])
    prevUpperBand = nz(upperBand[1])

    lowerBand := lowerBand > prevLowerBand or close[1] < prevLowerBand ? lowerBand : prevLowerBand
    upperBand := upperBand < prevUpperBand or close[1] > prevUpperBand ? upperBand : prevUpperBand

    var int _direction = 1  // âœ… Properly declared `_direction`
    _direction := nz(_direction[1], 1)
    if close > upperBand
        _direction := 1
    else if close < lowerBand
        _direction := -1

    superTrend = _direction == -1 ? lowerBand : upperBand
    [superTrend, _direction]

// ðŸ“Š K-MEANS VOLATILITY CLUSTERING
upper = ta.highest(volatility, training_data_period)
lower = ta.lowest(volatility, training_data_period)

hv_new = lower + (upper - lower) * highvol
mv_new = lower + (upper - lower) * midvol
lv_new = lower + (upper - lower) * lowvol

vdist_a = math.abs(volatility - hv_new)
vdist_b = math.abs(volatility - mv_new)
vdist_c = math.abs(volatility - lv_new)

cluster = vdist_a < vdist_b and vdist_a < vdist_c ? 0 : vdist_b < vdist_a and vdist_b < vdist_c ? 1 : 2
assigned_centroid = cluster == 0 ? hv_new : cluster == 1 ? mv_new : lv_new

// ðŸ”¥ APPLY SUPER TREND WITH ADAPTIVE ATR
[ST, dir] = adaptive_supertrend(fact, assigned_centroid)

// ðŸ“‰ PLOTTING THE FINAL SUPER TREND SIGNALS
upTrend = plot(dir > 0 ? ST : na, title="Up Trend", color=color.new(green, t1), style=plot.style_linebr)
downTrend = plot(dir < 0 ? ST : na, title="Down Trend", color=color.new(red, t1), style=plot.style_linebr)

fill(upTrend, downTrend, color=color.new(dir > 0 ? green : red, t2))

// ðŸ”¥ BAR COLOR TO HIGHLIGHT TRENDS
barcolor(dir > 0 ? green : red)

// ðŸ”” TREND SHIFT ALERTS
alertcondition(ta.crossunder(dir, 0), "Bullish Trend Shift")
alertcondition(ta.crossover(dir, 0), "Bearish Trend Shift")

// ðŸŽ¯ VOLATILITY ALERTS
alertcondition(cluster == 0 and cluster[1] != 0, "High Volatility Detected")
alertcondition(cluster == 1 and cluster[1] != 1, "Medium Volatility Detected")
alertcondition(cluster == 2 and cluster[1] != 2, "Low Volatility Detected")
