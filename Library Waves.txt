// This Pine Script™ code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// ©  kaigouthro



//@version=6
library("waves")

// #############################################################################
// #  Wave Functions
// #############################################################################

// @function `getSineWave` 
// > Calculates a sine wave based on bar index, cycles per minute (BPM), and wave parameters.
// @param cyclesPerMinute (float) The desired number of cycles per minute (BPM). Default is 30.0.
// @param bar (int) The current bar index. Default is bar_index.
// @param barsPerSecond (float) The number of bars per second. Default is 10.0 for Bar Replay
// @param amplitude (float) The amplitude of the sine wave. Default is 1.0.
// @param verticalShift (float) The vertical shift of the sine wave. Default is 0.0.
// @param phaseShift (float) The phase shift of the sine wave in radians. Default is 0.0.
// @returns (float) The calculated sine wave value.
export getSineWave(float cyclesPerMinute = 30.0, int bar = bar_index, float barsPerSecond = 10.0, float amplitude = 1.0, float verticalShift = 0.0, float phaseShift = 0.0) =>
    // Calculate the number of bars per cycle
    float barsPerCycle = barsPerSecond / (cyclesPerMinute / 60.0)
    // Calculate the cycle with phase shift
    float cycle = ((bar % barsPerCycle) * 2 * math.pi / barsPerCycle) + math.toradians(phaseShift)
    // Calculate the sine wave with amplitude and vertical shift
    verticalShift + amplitude * math.sin(cycle)

// @function `getCosineWave` 
// > Calculates a cosine wave based on bar index, cycles per minute (BPM), and wave parameters.
// @param cyclesPerMinute (float) The desired number of cycles per minute (BPM). Default is 30.0.
// @param bar (int) The current bar index. Default is bar_index.
// @param barsPerSecond (float) The number of bars per second. Default is 10.0 for Bar Replay
// @param amplitude (float) The amplitude of the cosine wave. Default is 1.0.
// @param verticalShift (float) The vertical shift of the cosine wave. Default is 0.0.
// @param phaseShift (float) The phase shift of the cosine wave in radians. Default is 0.0.
// @returns (float) The calculated cosine wave value.
export getCosineWave(float cyclesPerMinute = 30.0, int bar = bar_index, float barsPerSecond = 10.0, float amplitude = 1.0, float verticalShift = 0.0, float phaseShift = 0.0) =>
    // Calculate the number of bars per cycle
    float barsPerCycle = barsPerSecond / (cyclesPerMinute / 60.0)
    // Calculate the cycle with phase shift
    float cycle = ((bar % barsPerCycle) * 2 * math.pi / barsPerCycle) + math.toradians(phaseShift)
    // Calculate the cosine wave with amplitude and vertical shift
    verticalShift + amplitude * math.cos(cycle)

// @function `getTriangleWave` 
// > Calculates a triangle wave based on bar index, cycles per minute (BPM), and wave parameters.
// @param cyclesPerMinute (float) The desired number of cycles per minute (BPM). Default is 30.0.
// @param bar (int) The current bar index. Default is bar_index.
// @param barsPerSecond (float) The number of bars per second. Default is 10.0 for Bar Replay
// @param amplitude (float) The amplitude of the triangle wave. Default is 1.0.
// @param verticalShift (float) The vertical shift of the triangle wave. Default is 0.0.
// @param phaseShift (float) The phase shift of the triangle wave in radians. Default is 0.0.
// @returns (float) The calculated triangle wave value.
export getTriangleWave(float cyclesPerMinute = 30.0, int bar = bar_index, float barsPerSecond = 10.0, float amplitude = 1.0, float verticalShift = 0.0, float phaseShift = 0.0) =>
    // Calculate the number of bars per cycle
    float barsPerCycle = barsPerSecond / (cyclesPerMinute / 60.0)
    // Calculate the cycle with phase shift
    float cycle = ((bar % barsPerCycle) * 2 * math.pi / barsPerCycle) + math.toradians(phaseShift)
    // Calculate the triangle wave with amplitude and vertical shift
    verticalShift + amplitude * (2 * math.abs(cycle / (math.pi*2) - math.floor(cycle / (math.pi*2) + 0.5)))

// @function `getSquareWave` 
// > Calculates a square wave based on bar index, cycles per minute (BPM), and wave parameters.
// @param cyclesPerMinute (float) The desired number of cycles per minute (BPM). Default is 30.0.
// @param bar (int) The current bar index. Default is bar_index.
// @param barsPerSecond (float) The number of bars per second. Default is 10.0 for Bar Replay
// @param amplitude (float) The amplitude of the square wave. Default is 1.0.
// @param verticalShift (float) The vertical shift of the square wave. Default is 0.0.
// @param dutyCycle (float) The duty cycle of the square wave (0.0 to 1.0). Default is 0.5 (50% duty cycle).
// @param phaseShift (float) The phase shift of the square wave in radians. Default is 0.0.
// @returns (float) The calculated square wave value.
export getSquareWave(float cyclesPerMinute = 30.0, int bar = bar_index, float barsPerSecond = 10.0, float amplitude = 1.0, float verticalShift = 0.0, float dutyCycle = 0.5, float phaseShift = 0.0) =>
    // Calculate the number of bars per cycle
    float barsPerCycle = barsPerSecond / (cyclesPerMinute / 60.0)
    // Calculate the cycle with phase shift
    float cycle = ((bar % barsPerCycle) * 2 * math.pi / barsPerCycle) + math.toradians(phaseShift)
    // Calculate the square wave with amplitude and vertical shift
    float rawSquare = math.sin(cycle)
    float squareValue = rawSquare >= math.sin(dutyCycle * 2 * math.pi - math.pi/2) ? 1 : -1 // adjust threshold for duty cycle
    verticalShift + amplitude * squareValue


// #############################################################################
// #  Example Usage
// #############################################################################

// // --- Input Parameters ---
// float bpmInput = input.float(30.0, title="Cycles Per Minute (BPM)")
// float barsPerSecInput = input.float(10.0, title="Bars Per Second", step=0.1)

// // --- Sine Waves ---
// float sineWave1 = getSineWave(cyclesPerMinute = bpmInput, barsPerSecond = barsPerSecInput, amplitude = 50, verticalShift = 50)
// float sineWave2 = getSineWave(cyclesPerMinute = bpmInput, barsPerSecond = barsPerSecInput, amplitude = 30, verticalShift = 80, phaseShift = math.pi/2) // Different amplitude, shift, and phase

// // --- Cosine Wave ---
// float cosineWave1 = getCosineWave(cyclesPerMinute = bpmInput, barsPerSecond = barsPerSecInput, amplitude = 40, verticalShift = 20)

// // --- Triangle Wave ---
// float triangleWave1 = getTriangleWave(cyclesPerMinute = bpmInput, barsPerSecond = barsPerSecInput, amplitude = 60, verticalShift = 120)

// // --- Square Wave ---
// float squareWave1 = getSquareWave(cyclesPerMinute = bpmInput, barsPerSecond = barsPerSecInput, amplitude = 40, verticalShift = 180, dutyCycle = 0.75) // 75% duty cycle


// // --- Plotting ---
// plot(sineWave1, color=color.blue, title="Sine Wave 1")
// plot(sineWave2, color=color.red, title="Sine Wave 2")
// plot(cosineWave1, color=color.green, title="Cosine Wave 1")
// plot(triangleWave1, color=color.orange, title="Triangle Wave 1")
// plot(squareWave1, color=color.purple, title="Square Wave 1")
