// This Pine Script™ code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © LonesomeTheBlue
var risktt = "If distance between Entry and reversal level (Trailing stop-loss) is greater than maximum risk then the trade should not be taken"

//@version=6
indicator("Line Break Chart Strategy", shorttitle = "LBC", max_boxes_count = 500, max_bars_back = 4000, max_lines_count = 500)
nol = input.int(defval = 3, title = "Number of Lines", minval = 1, tooltip = "Number of the Line to check for the reversal")
totalbars = input.int(defval = 30000, title = "Maximum Number of the Bars", minval = 10, step = 500, tooltip = "Total number of the bars to create Line Break Chart")
overlay = input.bool(defval = false, title = "Show in the Main Chart")
gap = input.string(defval = "Off", title = "Gaps", options =["Off", "On"])
showTrend = input.bool(defval = true, title = "Trend", inline = "shwt")
uptcol = input.color(defval = color.lime, title = "", inline = "shwt")
dntcol = input.color(defval = color.red, title = "", inline = "shwt")
trendwidth = input.int(defval = 2, title = "", minval = 1, maxval = 5, inline = "shwt")
riskmanagement = input.bool(defval = false, title = "Risk Management")
maximumrisk = input.float(defval = 1.0, title = "  Maximum Risk %", minval = 0, step = 0.1, tooltip = risktt) / 100
breakout = input.bool(defval = true, title = "Breakout", inline = "bo")
breakoutucol = input.color(defval = color.blue, title = "", inline = "bo")
breakoutdcol = input.color(defval = color.navy, title = "", inline = "bo")
breakoutlstylei = input.string(defval = "Dotted", title = "", options = ["Solid", "Dashed", "Dotted"], inline = "bo")
flipflop = input.bool(defval = true, title = "Flip Flop", inline = "ff")
flipflopcol = input.color(defval = #b2b5be, title = "", inline = "ff")
showProbability = input.bool(defval = true, title = "Continuation Probability")
showreversal = input.bool(defval = true, title = "Reversal level")
showclosingp = input.bool(defval = true, title = "Closing Price")
showtable = input.bool(defval = true, title = "Temporal Sequence Table", inline = "table")
tableoverlay = input.bool(defval = false, title = "Main chart", inline = "table")
tabletype = input.string(defval = "Visual", title = "  Table Type", options = ["Visual", "Numbers"])
tableposy = input.string(defval='bottom', title='  Location', options=['bottom', 'middle', 'top'], inline='tabpos')
tableposx = input.string(defval='left', title='', options=['left', 'center', 'right'], inline='tabpos')
txtsize = input.string(defval = size.small, title = "  Text Size", options = [size.tiny, size.small, size.normal, size.large])
upbarsbg = input.color(defval = #36a845, title = "Up Bars", inline = "upbc", tooltip =" Confirmed, Unconfirmed bars and Border colors")
upbarsbguc = input.color(defval = color.blue, title = "", inline = "upbc")
upbarsbd = input.color(defval = #74e05e, title = "", inline = "upbc")
dnbarsbg = input.color(defval = #d11d17, title = "Down Bars", inline = "dnbc", tooltip =" Confirmed, Unconfirmed bars and Border colors")
dnbarsbguc = input.color(defval = color.navy, title = "", inline = "dnbc")
dnbarsbd = input.color(defval = #f7525f, title = "", inline = "dnbc")
//alerts
alertfrequency = input.string(defval = alert.freq_once_per_bar, title = "Alert Frequency", options = [alert.freq_once_per_bar_close, alert.freq_once_per_bar], group = "Alerts")
longshortalert = input.bool(defval = true, title = "Long/Short Alert")
longAmsg = input.string(defval = "Trend is Bullish", title = " Long Message", inline = "1")
shortAmsg = input.string(defval = "Trend is Bearish", title = " Short Message", inline = "2")
breakoutalert = input.bool(defval = true, title = "Breakout Alert")
bolongAmsg = input.string(defval = "Breakout Long", title = " Long Message", inline = "3")
boshortAmsg = input.string(defval = "Breakout Short", title = " Short Message", inline = "4")

method addtoarray(float [] this, float value) =>
    this.pop()
    this.unshift(value)
method addtoarray(int [] this, int value) =>
    this.pop()
    this.unshift(value)

getIndex(value)=>
    index =  value < 11 ? value - 1 :
             value > 10 and value <= 12 ? 10 :
             value > 12 and value <= 15 ? 11 : 
             12

getText(value)=>
    txt =  value < 11 ? str.tostring(value) :
             value == 11 ? "11-12" :
             value == 12 ? "13-15" : 
             ">15"

method addtrendcount(matrix<int> this, int value, int trend) =>
    index = getIndex(value)
    cc = trend == -1 ? 0 : 1
    this.set(index, cc, 1 + this.get(index, cc))

drawBox(l, t, r, b, bcol, bgcol)=>
    ret = overlay ?  box.new(left = l, top = t, right = r, bottom = b, border_width = 1, border_color = bcol, bgcolor = bgcol, force_overlay = true) :
                     box.new(left = l, top = t, right = r, bottom = b, border_width = 1, border_color = bcol, bgcolor = bgcol)

var trend = close >= open ? 1 : -1
var closes = array.new_float(500, close)
var opens = array.new_float(500, open)
var counts = array.new_int(500, 0)
var trcounts = matrix.new<int>(13, 2, 0)
var count = 0
var trcount = 1
var firstone = true
var breakoutlstyle = breakoutlstylei == "Solid" ? line.style_solid : breakoutlstylei == "Dashed" ? line.style_dashed : line.style_dotted

if bar_index >= last_bar_index - totalbars and (not barstate.isrealtime or barstate.isconfirmed)
    if bar_index == last_bar_index - totalbars
        trend := close >= open ? 1 : -1
        count := 0
        trcount := 1
        closes.fill(close)
        opens.fill(open)
    count += 1
    if trend == 1
        if close < math.min(array.min(array.slice(opens, 0, nol)), array.min(array.slice(closes, 0, nol)))
            if firstone
                firstone := false 
            else
                trcounts.addtrendcount(trcount, trend)
            trend := -1
            trcount := 0
        if close > closes.get(0) or trend == -1
            opens.addtoarray(trend == -1 ? opens.get(0) : closes.get(0))
            closes.addtoarray(close)
            counts.addtoarray(count)
            count := 0
            trcount += 1
    else if trend == -1 
        if close > math.max(array.max(array.slice(opens, 0, nol)), array.max(array.slice(closes, 0, nol)))
            if firstone
                firstone := false 
            else
                trcounts.addtrendcount(trcount, trend)
            trend := 1
            trcount := 0
        if close < closes.get(0) or trend == 1
            opens.addtoarray(trend == 1 ? opens.get(0) : closes.get(0))
            closes.addtoarray(close)
            counts.addtoarray(count)
            count := 0
            trcount += 1

if barstate.islast and matrix.max(trcounts) > 0
    var boxes = array.new_box(closes.size())
    xloc = bar_index
    ccounts = counts.copy()
    ccounts.unshift(count + 1)
    for x = 0 to (array.size(boxes) > 0 ? array.size(boxes) - 1 : na)
        box.delete(boxes.pop())
        
    for x = 0 to closes.size() -1
        if x < closes.size() -1 
            if bar_index - x < 1 or closes.get(x) == closes.get(x + 1) and opens.get(x) == opens.get(x + 1) // check if all lines used or reached the first available candle
                continue
        
        bgcol = closes.get(x) > opens.get(x) ? upbarsbg : dnbarsbg
        bdcol = closes.get(x) > opens.get(x) ? upbarsbd : dnbarsbd
        if flipflop and x > 0 and x < closes.size() - 1
            if closes.get(x) > opens.get(x) and closes.get(x - 1) < opens.get(x - 1) and closes.get(x + 1) < opens.get(x + 1) or
                 closes.get(x) < opens.get(x) and closes.get(x - 1) > opens.get(x - 1) and closes.get(x + 1) > opens.get(x + 1) 
                bgcol := flipflopcol
                
        left = gap == "On" ? xloc - ccounts.get(x) : bar_index - x - 1
        right = gap == "On" ? xloc : bar_index - x
        if overlay 
            boxes.unshift(box.new(left = left, top = closes.get(x), right = right, bottom = opens.get(x), border_width = 1, border_color = bdcol, bgcolor = bgcol, force_overlay = true))
        else
            boxes.unshift(box.new(left = left, top = closes.get(x), right = right, bottom = opens.get(x), border_width = 1, border_color = bdcol, bgcolor = bgcol))
        xloc -= ccounts.get(x)

    // realtime bar
    if barstate.isrealtime
        var box rtbox = na
        box.delete(rtbox)
        if trend == 1 
            if close < opens.get(0)
                rtbox := drawBox(bar_index, opens.get(0), bar_index + 1, close, dnbarsbguc, dnbarsbguc)
            else if close > closes.get(0)
                rtbox := drawBox(bar_index, close,  bar_index + 1,closes.get(0), upbarsbguc, upbarsbguc)
        if trend == -1
            if close > opens.get(0)
                rtbox := drawBox(bar_index, close, bar_index + 1, opens.get(0), upbarsbguc, upbarsbguc)
            else if close < closes.get(0)
                rtbox := drawBox(bar_index, closes.get(0), bar_index + 1, close, dnbarsbguc, dnbarsbguc)

    if breakout and closes.size() > 12
        a_allLines = line.all
        if array.size(a_allLines) > 0
            for i = 0 to array.size(a_allLines) - 1
                line.delete(array.get(a_allLines, i))
        xloc := bar_index
        for x = 0 to closes.size() - 10
            // get direction
            t = closes.get(x) > opens.get(x) ? 1 : -1
            bout = 0.
            min = opens.get(x)
            max = opens.get(x)
            xloc1 = bar_index
            for y = 0 to closes.size() - 2
                // max 150 box to check
                if y - x > 150
                    break
                if y < x + 3
                    if y > x and (t == 1 and closes.get(y) > closes.get(x) or t == -1 and closes.get(y) < closes.get(x))
                        break
                    xloc1 -= ccounts.get(y)
                    if y > x
                        min := math.min(min, closes.get(y))
                        max := math.max(max, closes.get(y))
                    continue
                
                if (t == 1 and closes.get(x) < closes.get(y)) or (t == -1 and closes.get(x) > closes.get(y))
                    break
                if t == 1 and max <= closes.get(y) and closes.get(x) > closes.get(y) and closes.get(y) > opens.get(y)  and closes.get(x + 1) <= closes.get(y) and closes.get(y) > math.max(closes.get(y - 1), closes.get(y + 1)) 
                    bout := closes.get(y) - closes.get(x)
                else if t == -1 and min >= closes.get(y) and closes.get(x) < closes.get(y) and closes.get(y) < opens.get(y) and closes.get(x + 1) >= closes.get(y) and closes.get(y) < math.min(closes.get(y - 1), closes.get(y + 1))
                    bout := closes.get(y) - closes.get(x)
                if bout != 0
                    left = gap == "On" ? xloc1 - ccounts.get(y) : bar_index - y - 1
                    right = gap == "On" ? xloc : bar_index - x
                    col = t == 1 ? breakoutucol : breakoutdcol
                    if breakoutalert and x == 0 and closes.get(0) == close
                        if t == 1
                            alert(bolongAmsg, freq = alertfrequency)
                        else
                            alert(boshortAmsg, freq = alertfrequency)
                    if overlay 
                        line.new(x1 = left + 1, y1 = closes.get(x) + bout, x2 = right, y2 = closes.get(x) + bout, color = col, style = breakoutlstyle, force_overlay = true)
                    else
                        line.new(x1 = left + 1, y1 = closes.get(x) + bout, x2 = right, y2 = closes.get(x) + bout, color = col, style = breakoutlstyle)
                    break
                xloc1 -= ccounts.get(y)
            xloc -= ccounts.get(x)

// Show trend, management of the risk
trendlevel = trend == 1 ? math.min(array.min(array.slice(opens, 0, nol)), array.min(array.slice(closes, 0, nol))) : math.max(array.max(array.slice(opens, 0, nol)), array.max(array.slice(closes, 0, nol)))
color trcol = trend != trend [1] ? na : trend == 1 ? uptcol : dntcol

risknotokey = riskmanagement and maximumrisk < math.abs(open - trendlevel) / open and trend != trend[1]
riskokey = trend != trend[1] and (not riskmanagement or maximumrisk >= math.abs(open - trendlevel) / open)
plot(showTrend and bar_index >= last_bar_index - totalbars ? trendlevel : na, force_overlay = true, color = trcol, linewidth = trendwidth)
plotshape(showTrend and risknotokey ? trendlevel : na, location = location.absolute, style = shape.xcross, size = size.small, force_overlay = true)
//buy condition
plotshape(showTrend and trend == 1 and riskokey ? trendlevel : na, text  = "Long", color = color.lime, textcolor = color.black, location = location.absolute, style = shape.labelup, force_overlay = true)
//sell condition
plotshape(showTrend and trend == -1 and riskokey ? trendlevel : na, text  = "Short", color = color.red, textcolor = color.black, location = location.absolute, style = shape.labeldown, force_overlay = true)

if longshortalert
    if trend == 1 and riskokey 
        alert(longAmsg, freq = alertfrequency)
    else if trend == -1 and riskokey 
        alert(shortAmsg, freq = alertfrequency)

if barstate.islast and showtable and matrix.max(trcounts) > 0
    var tsectable1 = table.new(position = tableposy + '_' + tableposx, columns = 22, rows= 20, frame_width = 1, bgcolor = chart.bg_color, frame_color = chart.fg_color, border_width = 1, border_color = color.new(chart.fg_color, 70), force_overlay = true)
    var tsectable2 = table.new(position = tableposy + '_' + tableposx, columns = 22, rows= 20, frame_width = 1, bgcolor = chart.bg_color, frame_color = chart.fg_color, border_width = 1, border_color = color.new(chart.fg_color, 70))
   
    tsectable = tableoverlay ? tsectable1 : tsectable2
    cIndex = getIndex(trcount)
    for y = 2 to 14
        table.cell(tsectable, 0, y, text = getText(y - 1), text_color = chart.bg_color, bgcolor = chart.fg_color, text_size = txtsize)
  
    table.cell(tsectable, 0, cIndex + 2, text = getText(cIndex + 1), text_color = color.white, bgcolor = color.blue, text_size = txtsize)

    // trending/choppy?
    var trendrate = array.from(1, 1, 1, 14, 35, 54, 58, 63, 70, 75, 80, 90, 100)
    utotal = 0.
    dtotal = 0.
    usum = 0.
    dsum = 0.
    for y = 12 to 0
        dtotal += (trcounts.get(y, 0) * trendrate.get(y)) * (y + 1)
        utotal += (trcounts.get(y, 1) * trendrate.get(y)) * (y + 1)
        dsum += trcounts.get(y, 0) * (y + 1)
        usum += trcounts.get(y, 1) * (y + 1)

    utrending = utotal / usum
    dtrending = dtotal / dsum
    uptrending = "Trending: " + str.tostring(utrending, '#.#') + "% \nChoppy: " + str.tostring(100 - utrending, '#.#') 
    dntrending = "Trending: " + str.tostring(dtrending, '#.#') + "% \nChoppy: " + str.tostring(100 - dtrending, '#.#') 

    maxcol = tabletype == "Visual" ? math.min(matrix.max(trcounts), 10) : 1
    float step = matrix.max(trcounts) / maxcol

    table.merge_cells(tsectable, maxcol + 1, 19, maxcol * 2, 19)
    table.cell(tsectable, maxcol + 1, 19, text = uptrending, text_color = chart.bg_color, bgcolor = #9feec8, text_size = txtsize)
    table.merge_cells(tsectable, 1, 19, maxcol, 19)
    table.cell(tsectable, 1, 19, text = dntrending, text_color = chart.bg_color, bgcolor = #f69a9a, text_size = txtsize)

    table.merge_cells(tsectable, 0, 0, maxcol * 2, 0)
    table.cell(tsectable, 0, 0, text = "Temporal Sequence Table", text_color = chart.bg_color, bgcolor = chart.fg_color, text_size = txtsize)
    table.merge_cells(tsectable, maxcol + 1, 1, maxcol * 2, 1)
    table.cell(tsectable, maxcol + 1, 1, text = "UP Frequency", text_color = chart.bg_color, bgcolor = #9feec8, text_size = txtsize)
    table.merge_cells(tsectable, 1, 1, maxcol, 1)
    table.cell(tsectable, 1, 1, text = "DOWN Frequency", text_color = chart.bg_color, bgcolor = #f69a9a, text_size = txtsize)
    
    for y = 0 to 12
        if matrix.get(trcounts, y, 0) > 0
            col = tabletype == "Visual" ? math.max(math.round(matrix.get(trcounts, y, 0) / step) - 1, 0) : 0
            bgcol = trend == -1 and y == cIndex ? color.orange : color.red
            for x = 0 to col
                txt = x == col ? str.tostring(matrix.get(trcounts, y, 0)) : ""
                table.cell(tsectable, maxcol - x, y + 2, text = txt, bgcolor = bgcol, text_size = txtsize)
        if matrix.get(trcounts, y, 1) > 0
            col = tabletype == "Visual" ? math.max(math.round(matrix.get(trcounts, y, 1) / step) - 1, 0) : 0
            bgcol = trend == 1 and y == cIndex ? color.green : color.lime
            for x = 0 to col
                txt = x == col ? str.tostring(matrix.get(trcounts, y, 1)) : ""
                table.cell(tsectable, maxcol + x + 1, y + 2, text = txt, bgcolor = bgcol, text_size = txtsize)

if barstate.islast 
    cIndex = getIndex(trcount)
    if showProbability
        txt = "NA"
        if cIndex < 12
            col = trend == -1 ? 0 : 1
            sum = array.sum(array.slice(trcounts.col(col), cIndex + 1, 13))
            rate = 100 * sum / (array.sum(array.slice(trcounts.col(col), 0, 13)))
            txt := str.tostring(rate, '#.##') + "%"
        
        txt := "Continuation\n" + "Probability: " + txt
        stl = trend == 1 ? label.style_label_lower_left: label.style_label_upper_left
        bgcol = trend == 1 ? color.lime : color.red
        float yloc = trend == 1 ? math.max(closes.get(0), close) : math.min(closes.get(0), close)
        var label poslabel = na, label.delete(poslabel)
        if overlay
            poslabel := label.new(bar_index + 2, yloc, text = txt, textcolor = color.black, color  = bgcol, style = stl, force_overlay = true)
        else
            poslabel := label.new(bar_index + 2, yloc, text = txt, textcolor = color.black, color  = bgcol, style = stl)

    // closing price
    if showclosingp
        var line cline = na, line.delete(cline)
        if overlay
            cline := line.new(bar_index + 1, close, bar_index + 2, close, style = line.style_dotted, extend = extend.right, force_overlay = true)
        else
            cline := line.new(bar_index + 1, close, bar_index + 2, close, style = line.style_dotted, extend = extend.right)

    // reversal
    if showreversal
        var line rline = na, line.delete(rline)
        rcol = trend == 1 ? color.red : color.lime
        if overlay
            rline := line.new(bar_index + 2, trendlevel, bar_index + 3, trendlevel, color = rcol, style = line.style_dashed, extend = extend.right, force_overlay = true)
        else
            rline := line.new(bar_index + 2, trendlevel, bar_index + 3, trendlevel, color = rcol, style = line.style_dashed, extend = extend.right)
        var label rlabel = na, label.delete(rlabel)
        lstyle = trend == 1 ? label.style_label_upper_left : label.style_label_lower_left
        lcol = trend == 1 ? (close < trendlevel ? dnbarsbguc : color.red) : (close > trendlevel ? upbarsbguc : color.lime)
        tcol = (trend == 1 and close < trendlevel) or (trend == -1 and close > trendlevel) ? color.white : color.black
        if overlay
            rlabel := label.new(bar_index + 2, trendlevel, text = "Reversal: " + str.tostring(trendlevel), color = lcol, textcolor = tcol, style = lstyle, force_overlay = true)
        else
            rlabel := label.new(bar_index + 2, trendlevel, text = "Reversal: " + str.tostring(trendlevel), color = lcol, textcolor = tcol, style = lstyle)

// show 
plot(showclosingp ? close : na, display = display.price_scale, color = color.rgb(0,0,0,100))
