// This Pine Script™ code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © TASC

//  TASC Issue: February 2025
//     Article: Drunkards Walk:
//              Theory And Measurement By Autocorrelation.
//  Article By: John F. Elhers
//    Language: TradingView's Pine Script® v6
// Provided By: PineCoders, for tradingview.com

//@version=6
title  = "TASC 2025.02 Autocorrelation Indicator"
stitle = "ACI"
indicator(title, stitle)

// --- Constants, enums, and inputs ---

// @variable Alias for `display.pane`.
DSP = display.pane

//@enum Range selection enumeration with three members.
enum R
    R1 = "0-32"
    R2 = "33-65"
    R3 = "66-98"

// @variable The source series to analyze.
float Src = input.source(close, "Source")
// @variable Length of each correlation calculation.
int Length = input.int(20, "Length")
// @variable If `true`, uses a 30-bar sine wave for testing.
bool iTest = input.bool(false, "Use test signal")
// @variable Lag range selection: 0-32, 33-65, or 66-98.
R iR = input.enum(R.R1, "Lag range")

// --- Functions ---

// @function      UltimateSmoother 
UltimateSmoother (float src, int period) =>
    float a1 = math.exp(-1.414 * math.pi / period)
    float c2 = 2.0 * a1 * math.cos(1.414 * math.pi / period)
    float c3 = -a1 * a1
    float c1 = (1.0 + c2 - c3) / 4.0
    float us = src
    if bar_index >= 4
        us := (1.0 - c1) * src + 
              (2.0 * c1 - c2) * src[1] - 
              (c1 + c3) * src[2] + 
              c2 * nz(us[1]) + c3 * nz(us[2])
    us

// @function      Autocorrelation heatmap
correlation(float src, simple int length) =>
    var array<float> corr = array.new<float>(101, 0.0)
    var array<color> col  = array.new<color>(101, #00000000)
    var array<float> data = array.new<float>(length)
    matrix<float>    mat  = matrix.new<float>()
    data.push(src)
    data.shift()
    mat.add_row(0, data)
    float sx  = math.sum(src, length)
    float sxx = math.sum(src * src, length)
    for l = 0 to 99
        array<float> lData = data[l]
        float sy  = sx[l]
        float syy = sxx[l]
        float sxy = na(lData) ? na : mat.mult(lData).first()
        float ca1 = length * sxx - sx * sx
        float ca2 = length * syy - sy * sy
        float c = 0.0
        if ca1 > 0.0 and ca2 > 0.0
            float ca3 = length * sxy - sx * sy
            corr.set(l + 1, ca3 / math.sqrt(ca1 * ca2))
    for l = 1 to 99
        float c = corr.get(l + 1)
        if c >= 0.0
            col.set(l, color.rgb(255 * (1.0 - c), 255, 0))
            continue
        if c < 0.0
            col.set(l, color.rgb(255, 255 * (1.0 + c), 0))
    col

// --- Calculations ---

//@variable The series to analyze (test signal or smoothed source). 
float Filt = switch
    iTest => math.sin(2.0 * math.pi * bar_index / 30.0)
    =>       UltimateSmoother(Src, Length)

//@variable Color array for the autocorrelation heatmap display.
array<color> C = correlation(Filt, Length)
// Slice the array into one of three ranges.
switch iR
    R.R1 => C := C.slice(0, 32)
    R.R2 => C := C.slice(33, 65)
    =>      C := C.slice(66, 98)

// Levels for the heatmap's plots
int IDX00 = iR == R.R1 ?  0 : (iR == R.R2 ? 33 : 66)
int IDX01 = iR == R.R1 ?  1 : (iR == R.R2 ? 34 : 67)
int IDX02 = iR == R.R1 ?  2 : (iR == R.R2 ? 35 : 68)
int IDX03 = iR == R.R1 ?  3 : (iR == R.R2 ? 36 : 69)
int IDX04 = iR == R.R1 ?  4 : (iR == R.R2 ? 37 : 70)
int IDX05 = iR == R.R1 ?  5 : (iR == R.R2 ? 38 : 71)
int IDX06 = iR == R.R1 ?  6 : (iR == R.R2 ? 39 : 72)
int IDX07 = iR == R.R1 ?  7 : (iR == R.R2 ? 40 : 73)
int IDX08 = iR == R.R1 ?  8 : (iR == R.R2 ? 41 : 74)
int IDX09 = iR == R.R1 ?  9 : (iR == R.R2 ? 42 : 75)
int IDX10 = iR == R.R1 ? 10 : (iR == R.R2 ? 43 : 76)
int IDX11 = iR == R.R1 ? 11 : (iR == R.R2 ? 44 : 77)
int IDX12 = iR == R.R1 ? 12 : (iR == R.R2 ? 45 : 78)
int IDX13 = iR == R.R1 ? 13 : (iR == R.R2 ? 46 : 79)
int IDX14 = iR == R.R1 ? 14 : (iR == R.R2 ? 47 : 80)
int IDX15 = iR == R.R1 ? 15 : (iR == R.R2 ? 48 : 81)
int IDX16 = iR == R.R1 ? 16 : (iR == R.R2 ? 49 : 82)
int IDX17 = iR == R.R1 ? 17 : (iR == R.R2 ? 50 : 83)
int IDX18 = iR == R.R1 ? 18 : (iR == R.R2 ? 51 : 84)
int IDX19 = iR == R.R1 ? 19 : (iR == R.R2 ? 52 : 85)
int IDX20 = iR == R.R1 ? 20 : (iR == R.R2 ? 53 : 86)
int IDX21 = iR == R.R1 ? 21 : (iR == R.R2 ? 54 : 87)
int IDX22 = iR == R.R1 ? 22 : (iR == R.R2 ? 55 : 88)
int IDX23 = iR == R.R1 ? 23 : (iR == R.R2 ? 56 : 89)
int IDX24 = iR == R.R1 ? 24 : (iR == R.R2 ? 57 : 90)
int IDX25 = iR == R.R1 ? 25 : (iR == R.R2 ? 58 : 91)
int IDX26 = iR == R.R1 ? 26 : (iR == R.R2 ? 59 : 92)
int IDX27 = iR == R.R1 ? 27 : (iR == R.R2 ? 60 : 93)
int IDX28 = iR == R.R1 ? 28 : (iR == R.R2 ? 61 : 94)
int IDX29 = iR == R.R1 ? 29 : (iR == R.R2 ? 62 : 95)
int IDX30 = iR == R.R1 ? 30 : (iR == R.R2 ? 63 : 96)
int IDX31 = iR == R.R1 ? 31 : (iR == R.R2 ? 64 : 97)
int IDX32 = iR == R.R1 ? 32 : (iR == R.R2 ? 65 : 98)

// Plot the lag levels with the calculated colors.
plot(IDX01, "S", C.get(0) , 2, display = DSP)
plot(IDX02, "S", C.get(1) , 2, display = DSP)
plot(IDX03, "S", C.get(2) , 2, display = DSP)
plot(IDX04, "S", C.get(3) , 2, display = DSP)
plot(IDX05, "S", C.get(4) , 2, display = DSP)
plot(IDX06, "S", C.get(5) , 2, display = DSP)
plot(IDX07, "S", C.get(6) , 2, display = DSP)
plot(IDX08, "S", C.get(7) , 2, display = DSP)
plot(IDX09, "S", C.get(8) , 2, display = DSP)
plot(IDX10, "S", C.get(9) , 2, display = DSP)
plot(IDX11, "S", C.get(10), 2, display = DSP)
plot(IDX12, "S", C.get(11), 2, display = DSP)
plot(IDX13, "S", C.get(12), 2, display = DSP)
plot(IDX14, "S", C.get(13), 2, display = DSP)
plot(IDX15, "S", C.get(14), 2, display = DSP)
plot(IDX16, "S", C.get(15), 2, display = DSP)
plot(IDX17, "S", C.get(16), 2, display = DSP)
plot(IDX18, "S", C.get(17), 2, display = DSP)
plot(IDX19, "S", C.get(18), 2, display = DSP)
plot(IDX20, "S", C.get(19), 2, display = DSP)
plot(IDX21, "S", C.get(20), 2, display = DSP)
plot(IDX22, "S", C.get(21), 2, display = DSP)
plot(IDX23, "S", C.get(22), 2, display = DSP)
plot(IDX24, "S", C.get(23), 2, display = DSP)
plot(IDX25, "S", C.get(24), 2, display = DSP)
plot(IDX26, "S", C.get(25), 2, display = DSP)
plot(IDX27, "S", C.get(26), 2, display = DSP)
plot(IDX28, "S", C.get(27), 2, display = DSP)
plot(IDX29, "S", C.get(28), 2, display = DSP)
plot(IDX30, "S", C.get(29), 2, display = DSP)
plot(IDX31, "S", C.get(30), 2, display = DSP)
plot(IDX32, "S", C.get(31), 2, display = DSP)
